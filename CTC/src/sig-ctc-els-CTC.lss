
sig-ctc-els-CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000536  2**0
                  ALLOC
  2 .stab         00000900  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007fb  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	8a c0       	rjmp	.+276    	; 0x122 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	ec d0       	rcall	.+472    	; 0x218 <main>
  40:	3e c2       	rjmp	.+1148   	; 0x4be <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <KeysInit>:

volatile uint8_t key_rpt;				// key long press and repeat


void KeysInit(void)
{
  44:	df 93       	push	r29
  46:	cf 93       	push	r28
  48:	cd b7       	in	r28, 0x3d	; 61
  4a:	de b7       	in	r29, 0x3e	; 62

	TCCR0A = 0;		// no OC, TOV at MAX, MAX is 0xFF	
  4c:	e0 e5       	ldi	r30, 0x50	; 80
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	10 82       	st	Z, r1
	TCCR0B = 0 | _BV(CS02) | _BV(CS00);		// divide by 1024
  52:	e3 e5       	ldi	r30, 0x53	; 83
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	85 e0       	ldi	r24, 0x05	; 5
  58:	80 83       	st	Z, r24
	TIMSK = _BV(TOIE0);									// enable timer interrupt
  5a:	e9 e5       	ldi	r30, 0x59	; 89
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	82 e0       	ldi	r24, 0x02	; 2
  60:	80 83       	st	Z, r24
	
	POS_IN_KEY_PORT &= ~POS_IN_KEY_MASK;
  62:	a2 e3       	ldi	r26, 0x32	; 50
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	8d 7f       	andi	r24, 0xFD	; 253
  6e:	8c 93       	st	X, r24
	POS_IN_KEY_DDR &= ~POS_IN_KEY_MASK;
  70:	a1 e3       	ldi	r26, 0x31	; 49
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e1 e3       	ldi	r30, 0x31	; 49
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	8c 93       	st	X, r24
    //UNLOCK_KEY_PORT &= ~UNLOCK_KEY_MASK;
    //UNLCOK_KEY_DDR &= ~UNLOCK_KEY_MASK;
}
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

00000084 <get_key_press>:


uint8_t get_key_press( uint8_t key_mask )
{
  84:	df 93       	push	r29
  86:	cf 93       	push	r28
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	89 83       	std	Y+1, r24	; 0x01
  cli();					// read and clear atomic !
  90:	f8 94       	cli
  key_mask &= key_press;                        // read key(s)
  92:	90 91 65 00 	lds	r25, 0x0065
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	89 23       	and	r24, r25
  9a:	89 83       	std	Y+1, r24	; 0x01
  key_press ^= key_mask;                        // clear key(s)
  9c:	90 91 65 00 	lds	r25, 0x0065
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	89 27       	eor	r24, r25
  a4:	80 93 65 00 	sts	0x0065, r24
  sei();
  a8:	78 94       	sei
  return key_mask;
  aa:	89 81       	ldd	r24, Y+1	; 0x01
}
  ac:	0f 90       	pop	r0
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <get_key_rpt>:


uint8_t get_key_rpt( uint8_t key_mask )
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	89 83       	std	Y+1, r24	; 0x01
  cli();					// read and clear atomic !
  c0:	f8 94       	cli
  key_mask &= key_rpt;                        	// read key(s)
  c2:	90 91 64 00 	lds	r25, 0x0064
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	89 23       	and	r24, r25
  ca:	89 83       	std	Y+1, r24	; 0x01
  key_rpt ^= key_mask;                        	// clear key(s)
  cc:	90 91 64 00 	lds	r25, 0x0064
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	89 27       	eor	r24, r25
  d4:	80 93 64 00 	sts	0x0064, r24
  sei();
  d8:	78 94       	sei
  return key_mask;
  da:	89 81       	ldd	r24, Y+1	; 0x01
}
  dc:	0f 90       	pop	r0
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <get_key_short>:


uint8_t get_key_short( uint8_t key_mask )
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	89 83       	std	Y+1, r24	; 0x01
  cli();			// read key state and key press atomic !
  f0:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
  f2:	80 91 66 00 	lds	r24, 0x0066
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25
  fe:	c2 df       	rcall	.-124    	; 0x84 <get_key_press>
}
 100:	0f 90       	pop	r0
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <get_key_long>:


uint8_t get_key_long( uint8_t key_mask )
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	0f 92       	push	r0
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
  return get_key_press( get_key_rpt( key_mask ));
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	ce df       	rcall	.-100    	; 0xb4 <get_key_rpt>
 118:	b5 df       	rcall	.-150    	; 0x84 <get_key_press>
}
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <__vector_6>:
void init(void);



ISR (TIMER0_OVF_vect)			// every 10ms
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <__vector_6+0x18>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
    uint8_t k, keyInput;
    // key debounce
    
    static uint8_t ticks = 0;

    TCNT0 = TIMER0_PRELOAD;	// preload for 10ms
 13e:	e2 e5       	ldi	r30, 0x52	; 82
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	88 ed       	ldi	r24, 0xD8	; 216
 144:	80 83       	st	Z, r24
  
  
  // compose input register by reading various input PIN registers (PINA and PIND)
    if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) keyInput |= POS_IN_KEY_DATA_BYTE_MASK; else  keyInput &= ~POS_IN_KEY_DATA_BYTE_MASK;
 146:	e0 e3       	ldi	r30, 0x30	; 48
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	82 70       	andi	r24, 0x02	; 2
 152:	90 70       	andi	r25, 0x00	; 0
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	21 f0       	breq	.+8      	; 0x160 <__vector_6+0x3e>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	03 c0       	rjmp	.+6      	; 0x166 <__vector_6+0x44>
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	89 83       	std	Y+1, r24	; 0x01
    if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) keyInput |= UNLOCK_KEY_DATA_BYTE_MASK; else  keyInput &= ~UNLOCK_KEY_DATA_BYTE_MASK;
 166:	e9 e3       	ldi	r30, 0x39	; 57
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	82 70       	andi	r24, 0x02	; 2
 172:	90 70       	andi	r25, 0x00	; 0
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	21 f0       	breq	.+8      	; 0x180 <__vector_6+0x5e>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	03 c0       	rjmp	.+6      	; 0x186 <__vector_6+0x64>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	89 83       	std	Y+1, r24	; 0x01

  
  
    k = key_state ^ keyInput;		// key changed ?  // "~" omitted for HIGH-active inputs; (LOW active: k = key_state ^ ~KEY_PIN;)
 186:	90 91 66 00 	lds	r25, 0x0066
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	89 27       	eor	r24, r25
 18e:	8a 83       	std	Y+2, r24	; 0x02
    ct0 = ~( ct0 & k );			// reset or count ct0
 190:	90 91 62 00 	lds	r25, 0x0062
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	89 23       	and	r24, r25
 198:	80 95       	com	r24
 19a:	80 93 62 00 	sts	0x0062, r24
    ct1 = ct0 ^ (ct1 & k);		// reset or count ct1
 19e:	90 91 61 00 	lds	r25, 0x0061
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	98 23       	and	r25, r24
 1a6:	80 91 62 00 	lds	r24, 0x0062
 1aa:	89 27       	eor	r24, r25
 1ac:	80 93 61 00 	sts	0x0061, r24
    k&= ct0 & ct1;			// count until roll over ?
 1b0:	90 91 62 00 	lds	r25, 0x0062
 1b4:	80 91 61 00 	lds	r24, 0x0061
 1b8:	98 23       	and	r25, r24
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	89 23       	and	r24, r25
 1be:	8a 83       	std	Y+2, r24	; 0x02
    key_state ^= k;			// then toggle debounced state
 1c0:	90 91 66 00 	lds	r25, 0x0066
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	89 27       	eor	r24, r25
 1c8:	80 93 66 00 	sts	0x0066, r24
    key_press |= key_state & k;		// 0->1: key press detect
 1cc:	90 91 66 00 	lds	r25, 0x0066
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	98 23       	and	r25, r24
 1d4:	80 91 65 00 	lds	r24, 0x0065
 1d8:	89 2b       	or	r24, r25
 1da:	80 93 65 00 	sts	0x0065, r24
    key_rpt |= key_state & REPEAT_MASK;
    */

    //if (OnOffLockout) --OnOffLockout;
  
    ++ticks;
 1de:	80 91 60 00 	lds	r24, 0x0060
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 60 00 	sts	0x0060, r24
	if (ticks >= QUARTER_SECS_IN_10_MSEC)
 1e8:	80 91 60 00 	lds	r24, 0x0060
 1ec:	89 31       	cpi	r24, 0x19	; 25
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <__vector_6+0xdc>
	{
	   ticks = 0;
 1f0:	10 92 60 00 	sts	0x0060, r1
	   State |= QUARTER_SEC;
 1f4:	80 91 63 00 	lds	r24, 0x0063
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	80 93 63 00 	sts	0x0063, r24
	}
  
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

int main(void)
{
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	00 d0       	rcall	.+0      	; 0x21e <main+0x6>
 21e:	00 d0       	rcall	.+0      	; 0x220 <main+0x8>
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t SwitchRequestedPosition, SwitchReadPosition;
	uint8_t SwitchPowerTimer = 0;//, TrackRelaisPowerTimer = 0;
 224:	19 82       	std	Y+1, r1	; 0x01

    // memorize high keys
  //  if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= POS_IN_KEY_DATA_BYTE_MASK; else  KeyMemory &= ~POS_IN_KEY_DATA_BYTE_MASK;
   // if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= UNLOCK_KEY_DATA_BYTE_MASK; else  KeyMemory &= ~UNLOCK_KEY_DATA_BYTE_MASK;
	
	State = 0; // deactivate UNLOCKED, TIMING_OUT
 226:	10 92 63 00 	sts	0x0063, r1
	
	init();
 22a:	db d0       	rcall	.+438    	; 0x3e2 <init>
	
	
	//SwitchRequestedPosition = TO_NORMAL;
	
	// deactivate switch motor
	SWITCH_POWER_DISABLE_PORT |= SWITCH_POWER_DISABLE_MASK;
 22c:	a2 e3       	ldi	r26, 0x32	; 50
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e2 e3       	ldi	r30, 0x32	; 50
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	80 62       	ori	r24, 0x20	; 32
 238:	8c 93       	st	X, r24

    // deactivate relais
//    TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
  //  TRACK_RELAIS_POWER_DISABLE_PORT &= ~TRACK_RELAIS_POWER_DISABLE_MASK;
    
	sei();
 23a:	78 94       	sei
	
	
	//if (!(eeprom_is_ready())) eeprom_busy_wait();
	//SwitchRequestedPosition = eeprom_read_byte((uint8_t *) EE_REQUESTED_POSITION_STORE_ADDRESS);

	if ((SwitchRequestedPosition != TO_NORMAL) && (SwitchRequestedPosition != TO_REVERSE))  SwitchRequestedPosition = TO_NORMAL;
 23c:	8b 81       	ldd	r24, Y+3	; 0x03
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	29 f0       	breq	.+10     	; 0x24c <main+0x34>
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	11 f0       	breq	.+4      	; 0x24c <main+0x34>
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	8b 83       	std	Y+3, r24	; 0x03
    // TODO - could delay some 50-100 ms here?
    /**************************/
    

	// clear any keys previously pressed
	i = get_key_press(0xFF);
 24c:	8f ef       	ldi	r24, 0xFF	; 255
 24e:	1a df       	rcall	.-460    	; 0x84 <get_key_press>
 250:	8c 83       	std	Y+4, r24	; 0x04
	i = get_key_short(0xFF);
 252:	8f ef       	ldi	r24, 0xFF	; 255
 254:	47 df       	rcall	.-370    	; 0xe4 <get_key_short>
 256:	8c 83       	std	Y+4, r24	; 0x04
	i = get_key_long(0xFF);
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	56 df       	rcall	.-340    	; 0x108 <get_key_long>
 25c:	8c 83       	std	Y+4, r24	; 0x04
	i = get_key_rpt(0xFF);
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	29 df       	rcall	.-430    	; 0xb4 <get_key_rpt>
 262:	8c 83       	std	Y+4, r24	; 0x04
    {
        // MAIN LOOP
        
        // read status of turnout; because of the capacitors, initial position will
		// be wrong until the capacitors have fully loaded
    	if (SWITCH_N_PIN & SWITCH_N_MASK) SwitchReadPosition |= TO_NORMAL; else SwitchReadPosition &= ~TO_NORMAL;
 264:	e0 e3       	ldi	r30, 0x30	; 48
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	88 2f       	mov	r24, r24
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	84 70       	andi	r24, 0x04	; 4
 270:	90 70       	andi	r25, 0x00	; 0
 272:	00 97       	sbiw	r24, 0x00	; 0
 274:	21 f0       	breq	.+8      	; 0x27e <main+0x66>
 276:	8a 81       	ldd	r24, Y+2	; 0x02
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	8a 83       	std	Y+2, r24	; 0x02
 27c:	03 c0       	rjmp	.+6      	; 0x284 <main+0x6c>
 27e:	8a 81       	ldd	r24, Y+2	; 0x02
 280:	8e 7f       	andi	r24, 0xFE	; 254
 282:	8a 83       	std	Y+2, r24	; 0x02
    	if (SWITCH_R_PIN & SWITCH_R_MASK) SwitchReadPosition |= TO_REVERSE; else SwitchReadPosition &= ~TO_REVERSE;
 284:	e6 e3       	ldi	r30, 0x36	; 54
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	80 81       	ld	r24, Z
 28a:	88 2f       	mov	r24, r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	80 71       	andi	r24, 0x10	; 16
 290:	90 70       	andi	r25, 0x00	; 0
 292:	00 97       	sbiw	r24, 0x00	; 0
 294:	21 f0       	breq	.+8      	; 0x29e <main+0x86>
 296:	8a 81       	ldd	r24, Y+2	; 0x02
 298:	82 60       	ori	r24, 0x02	; 2
 29a:	8a 83       	std	Y+2, r24	; 0x02
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <main+0x8c>
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	8d 7f       	andi	r24, 0xFD	; 253
 2a2:	8a 83       	std	Y+2, r24	; 0x02
		
		SwitchReadPosition &= TO_NORMAL | TO_REVERSE;
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	83 70       	andi	r24, 0x03	; 3
 2a8:	8a 83       	std	Y+2, r24	; 0x02
		
		
        // read the MODE configuration switch
    	if (MODE_PIN & MODE_MASK)
 2aa:	e6 e3       	ldi	r30, 0x36	; 54
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 2f       	mov	r24, r24
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	84 70       	andi	r24, 0x04	; 4
 2b6:	90 70       	andi	r25, 0x00	; 0
 2b8:	00 97       	sbiw	r24, 0x00	; 0
 2ba:	11 f1       	breq	.+68     	; 0x300 <main+0xe8>
    	{
    	    // SW1 is high (off)
    	    // in this mode, we work according to CTC input
    	    // if the TO_REQ_REVERSE output on the CTC controller is high, set switch to REVERSE
    	    if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPosition = TO_NORMAL;
 2bc:	e0 e3       	ldi	r30, 0x30	; 48
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	88 2f       	mov	r24, r24
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	81 70       	andi	r24, 0x01	; 1
 2c8:	90 70       	andi	r25, 0x00	; 0
 2ca:	88 23       	and	r24, r24
 2cc:	19 f0       	breq	.+6      	; 0x2d4 <main+0xbc>
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	8b 83       	std	Y+3, r24	; 0x03
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <main+0xc0>
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	8b 83       	std	Y+3, r24	; 0x03
    	    
    	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	d4 de       	rcall	.-600    	; 0x84 <get_key_press>
 2dc:	88 23       	and	r24, r24
 2de:	09 f0       	breq	.+2      	; 0x2e2 <main+0xca>
            {
                // clear a key pressed
                asm("nop");
 2e0:	00 00       	nop
            }
            
            LED_0N_PORT |= LED_0N_MASK;
 2e2:	a8 e3       	ldi	r26, 0x38	; 56
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e8 e3       	ldi	r30, 0x38	; 56
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	81 60       	ori	r24, 0x01	; 1
 2ee:	8c 93       	st	X, r24
            LED_1R_PORT |= LED_1R_MASK;
 2f0:	a8 e3       	ldi	r26, 0x38	; 56
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	e8 e3       	ldi	r30, 0x38	; 56
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	8c 93       	st	X, r24
 2fe:	0f c0       	rjmp	.+30     	; 0x31e <main+0x106>
            
    	} else {
    	    // SW1 is low (on)
    	    // in this mode, we disregard CTC input and activate manual control
			
            if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))// || (KeyMemory & POS_IN_KEY_DATA_BYTE_MASK))
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	c0 de       	rcall	.-640    	; 0x84 <get_key_press>
 304:	88 23       	and	r24, r24
 306:	59 f0       	breq	.+22     	; 0x31e <main+0x106>
            {
                // key pressed, toggle switch position; in this mode, no lock is simulated
                if (SwitchRequestedPosition == TO_NORMAL) SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_NORMAL;
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	81 30       	cpi	r24, 0x01	; 1
 30c:	19 f4       	brne	.+6      	; 0x314 <main+0xfc>
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	8b 83       	std	Y+3, r24	; 0x03
 312:	05 c0       	rjmp	.+10     	; 0x31e <main+0x106>
 314:	8b 81       	ldd	r24, Y+3	; 0x03
 316:	82 30       	cpi	r24, 0x02	; 2
 318:	11 f4       	brne	.+4      	; 0x31e <main+0x106>
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	8b 83       	std	Y+3, r24	; 0x03
                // clear stored key at startup
                //KeyMemory &= ~POS_IN_KEY_DATA_BYTE_MASK;
            }
    	}
    	
    	if (SwitchRequestedPosition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 31e:	8b 81       	ldd	r24, Y+3	; 0x03
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	41 f4       	brne	.+16     	; 0x334 <main+0x11c>
 324:	a2 e3       	ldi	r26, 0x32	; 50
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e2 e3       	ldi	r30, 0x32	; 50
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	88 60       	ori	r24, 0x08	; 8
 330:	8c 93       	st	X, r24
 332:	07 c0       	rjmp	.+14     	; 0x342 <main+0x12a>
 334:	a2 e3       	ldi	r26, 0x32	; 50
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e2 e3       	ldi	r30, 0x32	; 50
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	87 7f       	andi	r24, 0xF7	; 247
 340:	8c 93       	st	X, r24
    	
        if (SwitchRequestedPosition == TO_NORMAL)
 342:	8b 81       	ldd	r24, Y+3	; 0x03
 344:	81 30       	cpi	r24, 0x01	; 1
 346:	79 f4       	brne	.+30     	; 0x366 <main+0x14e>
        {
            LED_0N_PORT &= ~LED_0N_MASK;
 348:	a8 e3       	ldi	r26, 0x38	; 56
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e8 e3       	ldi	r30, 0x38	; 56
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8e 7f       	andi	r24, 0xFE	; 254
 354:	8c 93       	st	X, r24
            LED_1R_PORT |= LED_1R_MASK;
 356:	a8 e3       	ldi	r26, 0x38	; 56
 358:	b0 e0       	ldi	r27, 0x00	; 0
 35a:	e8 e3       	ldi	r30, 0x38	; 56
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	82 60       	ori	r24, 0x02	; 2
 362:	8c 93       	st	X, r24
 364:	11 c0       	rjmp	.+34     	; 0x388 <main+0x170>
        } else if (SwitchRequestedPosition == TO_REVERSE) {
 366:	8b 81       	ldd	r24, Y+3	; 0x03
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	71 f4       	brne	.+28     	; 0x388 <main+0x170>
            LED_0N_PORT |= LED_0N_MASK;
 36c:	a8 e3       	ldi	r26, 0x38	; 56
 36e:	b0 e0       	ldi	r27, 0x00	; 0
 370:	e8 e3       	ldi	r30, 0x38	; 56
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	80 81       	ld	r24, Z
 376:	81 60       	ori	r24, 0x01	; 1
 378:	8c 93       	st	X, r24
            LED_1R_PORT &= ~LED_1R_MASK;
 37a:	a8 e3       	ldi	r26, 0x38	; 56
 37c:	b0 e0       	ldi	r27, 0x00	; 0
 37e:	e8 e3       	ldi	r30, 0x38	; 56
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	8d 7f       	andi	r24, 0xFD	; 253
 386:	8c 93       	st	X, r24
        }
            
    	
    	if (   SwitchRequestedPosition  != SwitchReadPosition )
 388:	9b 81       	ldd	r25, Y+3	; 0x03
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	98 17       	cp	r25, r24
 38e:	11 f0       	breq	.+4      	; 0x394 <main+0x17c>
    	{
    	    // switch state is not congruent with requested state
    	    SwitchPowerTimer = SWITCH_POWER_TIMER;
 390:	80 e1       	ldi	r24, 0x10	; 16
 392:	89 83       	std	Y+1, r24	; 0x01
    	}
    	
    	if (SwitchPowerTimer) SWITCH_POWER_DISABLE_PORT &= ~SWITCH_POWER_DISABLE_MASK; else SWITCH_POWER_DISABLE_PORT |= SWITCH_POWER_DISABLE_MASK;
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	88 23       	and	r24, r24
 398:	41 f0       	breq	.+16     	; 0x3aa <main+0x192>
 39a:	a2 e3       	ldi	r26, 0x32	; 50
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e2 e3       	ldi	r30, 0x32	; 50
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	8f 7d       	andi	r24, 0xDF	; 223
 3a6:	8c 93       	st	X, r24
 3a8:	07 c0       	rjmp	.+14     	; 0x3b8 <main+0x1a0>
 3aa:	a2 e3       	ldi	r26, 0x32	; 50
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	e2 e3       	ldi	r30, 0x32	; 50
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	80 62       	ori	r24, 0x20	; 32
 3b6:	8c 93       	st	X, r24
		//if (TrackRelaisPowerTimer) TRACK_RELAIS_POWER_DISABLE_PORT &= ~TRACK_RELAIS_POWER_DISABLE_MASK; else TRACK_RELAIS_POWER_DISABLE_PORT |= TRACK_RELAIS_POWER_DISABLE_MASK;

		
		if (State & QUARTER_SEC)
 3b8:	80 91 63 00 	lds	r24, 0x0063
 3bc:	88 2f       	mov	r24, r24
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	81 70       	andi	r24, 0x01	; 1
 3c2:	90 70       	andi	r25, 0x00	; 0
 3c4:	88 23       	and	r24, r24
 3c6:	09 f4       	brne	.+2      	; 0x3ca <main+0x1b2>
 3c8:	4d cf       	rjmp	.-358    	; 0x264 <main+0x4c>
        {
            if (SwitchPowerTimer) --SwitchPowerTimer;
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	88 23       	and	r24, r24
 3ce:	19 f0       	breq	.+6      	; 0x3d6 <main+0x1be>
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	81 50       	subi	r24, 0x01	; 1
 3d4:	89 83       	std	Y+1, r24	; 0x01
                LED_1R_PORT ^= LED_1R_MASK;
            } else {
                LED_0N_PORT |= LED_0N_MASK;
                LED_1R_PORT |= LED_1R_MASK;
            }*/
            State &= ~QUARTER_SEC;
 3d6:	80 91 63 00 	lds	r24, 0x0063
 3da:	8e 7f       	andi	r24, 0xFE	; 254
 3dc:	80 93 63 00 	sts	0x0063, r24
 3e0:	41 cf       	rjmp	.-382    	; 0x264 <main+0x4c>

000003e2 <init>:
}



void init(void)
{
 3e2:	df 93       	push	r29
 3e4:	cf 93       	push	r28
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
	
	ACSR = _BV(ACD);
 3ea:	e8 e2       	ldi	r30, 0x28	; 40
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	80 e8       	ldi	r24, 0x80	; 128
 3f0:	80 83       	st	Z, r24
	
	//inputs
	// keys are handled in KeysInit() initialization routine
	
	CTC_IN_PORT &= ~CTC_IN_MASK;
 3f2:	a2 e3       	ldi	r26, 0x32	; 50
 3f4:	b0 e0       	ldi	r27, 0x00	; 0
 3f6:	e2 e3       	ldi	r30, 0x32	; 50
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	8e 7f       	andi	r24, 0xFE	; 254
 3fe:	8c 93       	st	X, r24
	CTC_IN_DDR &= ~CTC_IN_MASK;
 400:	a1 e3       	ldi	r26, 0x31	; 49
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	e1 e3       	ldi	r30, 0x31	; 49
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	8e 7f       	andi	r24, 0xFE	; 254
 40c:	8c 93       	st	X, r24
	
	MODE_PORT &= ~MODE_MASK;
 40e:	a8 e3       	ldi	r26, 0x38	; 56
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e8 e3       	ldi	r30, 0x38	; 56
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8b 7f       	andi	r24, 0xFB	; 251
 41a:	8c 93       	st	X, r24
	MODE_DDR &= ~MODE_MASK;
 41c:	a7 e3       	ldi	r26, 0x37	; 55
 41e:	b0 e0       	ldi	r27, 0x00	; 0
 420:	e7 e3       	ldi	r30, 0x37	; 55
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	8b 7f       	andi	r24, 0xFB	; 251
 428:	8c 93       	st	X, r24
	
	SWITCH_N_PORT &= ~SWITCH_N_MASK;
 42a:	a2 e3       	ldi	r26, 0x32	; 50
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e2 e3       	ldi	r30, 0x32	; 50
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	8b 7f       	andi	r24, 0xFB	; 251
 436:	8c 93       	st	X, r24
	SWITCH_N_DDR &= ~SWITCH_N_MASK;
 438:	a1 e3       	ldi	r26, 0x31	; 49
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e1 e3       	ldi	r30, 0x31	; 49
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	8b 7f       	andi	r24, 0xFB	; 251
 444:	8c 93       	st	X, r24
	
	SWITCH_R_PORT &= ~SWITCH_R_MASK;
 446:	a8 e3       	ldi	r26, 0x38	; 56
 448:	b0 e0       	ldi	r27, 0x00	; 0
 44a:	e8 e3       	ldi	r30, 0x38	; 56
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	80 81       	ld	r24, Z
 450:	8f 7e       	andi	r24, 0xEF	; 239
 452:	8c 93       	st	X, r24
	SWITCH_R_DDR &= ~SWITCH_R_MASK;
 454:	a7 e3       	ldi	r26, 0x37	; 55
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	e7 e3       	ldi	r30, 0x37	; 55
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	80 81       	ld	r24, Z
 45e:	8f 7e       	andi	r24, 0xEF	; 239
 460:	8c 93       	st	X, r24
	
	//outputs
	SWITCH_POS_DDR |= SWITCH_POS_MASK;
 462:	a1 e3       	ldi	r26, 0x31	; 49
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e1 e3       	ldi	r30, 0x31	; 49
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	88 60       	ori	r24, 0x08	; 8
 46e:	8c 93       	st	X, r24
	//TRACK_RELAIS_DDR |= TRACK_RELAIS_MASK;
	
	SWITCH_POWER_DISABLE_DDR |= SWITCH_POWER_DISABLE_MASK;
 470:	a1 e3       	ldi	r26, 0x31	; 49
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	e1 e3       	ldi	r30, 0x31	; 49
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	80 62       	ori	r24, 0x20	; 32
 47c:	8c 93       	st	X, r24
	//TRACK_RELAIS_POWER_DISABLE_DDR |= TRACK_RELAIS_POWER_DISABLE_MASK;

	LED_0N_PORT |= LED_0N_MASK;
 47e:	a8 e3       	ldi	r26, 0x38	; 56
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	e8 e3       	ldi	r30, 0x38	; 56
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	81 60       	ori	r24, 0x01	; 1
 48a:	8c 93       	st	X, r24
	LED_0N_DDR |= LED_0N_MASK;
 48c:	a7 e3       	ldi	r26, 0x37	; 55
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	e7 e3       	ldi	r30, 0x37	; 55
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	80 81       	ld	r24, Z
 496:	81 60       	ori	r24, 0x01	; 1
 498:	8c 93       	st	X, r24

	LED_1R_PORT |= LED_1R_MASK;
 49a:	a8 e3       	ldi	r26, 0x38	; 56
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e8 e3       	ldi	r30, 0x38	; 56
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	8c 93       	st	X, r24
	LED_1R_DDR |= LED_1R_MASK;
 4a8:	a7 e3       	ldi	r26, 0x37	; 55
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e7 e3       	ldi	r30, 0x37	; 55
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	82 60       	ori	r24, 0x02	; 2
 4b4:	8c 93       	st	X, r24
	

	
	KeysInit();
 4b6:	c6 dd       	rcall	.-1140   	; 0x44 <KeysInit>

}
 4b8:	cf 91       	pop	r28
 4ba:	df 91       	pop	r29
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
