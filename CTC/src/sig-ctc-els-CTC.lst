   1               		.file	"sig-ctc-els-CTC.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  70               	.global	KeysInit
  72               	KeysInit:
  74               	.Ltext1:
   1:keydeb.c      **** 
   2:keydeb.c      **** 
   3:keydeb.c      **** #include "keydeb.h"
   4:keydeb.c      **** 
   5:keydeb.c      **** volatile uint8_t key_state;				// debounced and inverted key state:
   6:keydeb.c      **** 					// bit = 1: key pressed
   7:keydeb.c      **** volatile uint8_t key_press;				// key press detect
   8:keydeb.c      **** 
   9:keydeb.c      **** volatile uint8_t key_rpt;				// key long press and repeat
  10:keydeb.c      **** 
  11:keydeb.c      **** 
  12:keydeb.c      **** void KeysInit(void)
  13:keydeb.c      **** {
  75               	_L__
  76               		in r29,__SP_H__
  77               	/* prologue: function */
  78 0000 DF93      	/* frame size = 0 */
  80 0004 CDB7      	.LM1:
  81 0006 DEB7      		ldi r30,lo8(80)
  82               		ldi r31,hi8(80)
  83               		st Z,__zero_reg__
  14:keydeb.c      **** 
  15:keydeb.c      **** 	TCCR0A = 0;		// no OC, TOV at MAX, MAX is 0xFF	
  84               	8,0,16,.LM2-.LFBB1
  85               	.LM2:
  86 0008 E0E5      		ldi r30,lo8(83)
  87 000a F0E0      		ldi r31,hi8(83)
  88 000c 1082      		ldi r24,lo8(5)
  16:keydeb.c      **** 	TCCR0B = 0 | _BV(CS02) | _BV(CS00);		// divide by 1024
  89               	,r24
  91 000e E3E5      	.LM3:
  92 0010 F0E0      		ldi r30,lo8(89)
  93 0012 85E0      		ldi r31,hi8(89)
  94 0014 8083      		ldi r24,lo8(2)
  17:keydeb.c      **** 	TIMSK = _BV(TOIE0);									// enable timer interrupt
  95               	r24
  97 0016 E9E5      	.LM4:
  98 0018 F0E0      		ldi r26,lo8(50)
  99 001a 82E0      		ldi r27,hi8(50)
 100 001c 8083      		ldi r30,lo8(50)
  18:keydeb.c      **** 	
  19:keydeb.c      **** 	POS_IN_KEY_PORT &= ~POS_IN_KEY_MASK;
 101               	31,hi8(50)
 102               		ld r24,Z
 103 001e A2E3      		andi r24,lo8(-3)
 104 0020 B0E0      		st X,r24
 106 0024 F0E0      	.LM5:
 107 0026 8081      		ldi r26,lo8(49)
 108 0028 8D7F      		ldi r27,hi8(49)
 109 002a 8C93      		ldi r30,lo8(49)
  20:keydeb.c      **** 	POS_IN_KEY_DDR &= ~POS_IN_KEY_MASK;
 110               	hi8(49)
 111               		ld r24,Z
 112 002c A1E3      		andi r24,lo8(-3)
 113 002e B0E0      		st X,r24
 114 0030 E1E3      	/* epilogue start */
 116 0034 8081      	.LM6:
 117 0036 8D7F      		pop r28
 118 0038 8C93      		pop r29
 119               		ret
  21:keydeb.c      ****     //UNLOCK_KEY_PORT &= ~UNLOCK_KEY_MASK;
  22:keydeb.c      ****     //UNLCOK_KEY_DDR &= ~UNLOCK_KEY_MASK;
  23:keydeb.c      **** }
 120               	sInit, .-KeysInit
 121               	.Lscope1:
 124 003e 0895      	.global	get_key_press
 126               	get_key_press:
 128               	.LM7:
 129               	.LFBB2:
 130               		push r29
 131               		push r28
  24:keydeb.c      **** 
  25:keydeb.c      **** 
  26:keydeb.c      **** uint8_t get_key_press( uint8_t key_mask )
  27:keydeb.c      **** {
 132               	reg__
 133               		in r28,__SP_L__
 134               		in r29,__SP_H__
 135 0040 DF93      	/* prologue: function */
 136 0042 CF93      	/* frame size = 1 */
 137 0044 0F92      		std Y+1,r24
 139 0048 DEB7      	.LM8:
 140               	/* #APP */
 141               	 ;  28 "keydeb.c" 1
 142 004a 8983      		cli
  28:keydeb.c      ****   cli();					// read and clear atomic !
 144               	.LM9:
 145               	/* #NOAPP */
 146               		lds r25,key_press
 147 004c F894      		ldd r24,Y+1
 148               		and r24,r25
  29:keydeb.c      ****   key_mask &= key_press;                        // read key(s)
 149               	+1,r24
 151               	.LM10:
 152 004e 9091 0000 		lds r25,key_press
 153 0052 8981      		ldd r24,Y+1
 154 0054 8923      		eor r24,r25
 155 0056 8983      		sts key_press,r24
  30:keydeb.c      ****   key_press ^= key_mask;                        // clear key(s)
 156               		68,0,31,.LM11-.LFBB2
 157               	.LM11:
 158 0058 9091 0000 	/* #APP */
 159 005c 8981      	 ;  31 "keydeb.c" 1
 160 005e 8927      		sei
 161 0060 8093 0000 	 ;  0 "" 2
  31:keydeb.c      ****   sei();
 162               	n	68,0,32,.LM12-.LFBB2
 163               	.LM12:
 164               	/* #NOAPP */
 165               		ldd r24,Y+1
 166 0064 7894      	/* epilogue start */
  32:keydeb.c      ****   return key_mask;
 168               	
 169               		pop __tmp_reg__
 170               		pop r28
 171 0066 8981      		pop r29
 172               		ret
  33:keydeb.c      **** }
 173               	ze	get_key_press, .-get_key_press
 174               	.Lscope2:
 177 006c DF91      	.global	get_key_rpt
 179               	get_key_rpt:
 181               	.LM14:
 182               	.LFBB3:
 183               		push r29
 184               		push r28
 185               		push __tmp_reg__
  34:keydeb.c      **** 
  35:keydeb.c      **** 
  36:keydeb.c      **** uint8_t get_key_rpt( uint8_t key_mask )
  37:keydeb.c      **** {
 186               	L__
 187               		in r29,__SP_H__
 188               	/* prologue: function */
 189 0070 DF93      	/* frame size = 1 */
 190 0072 CF93      		std Y+1,r24
 192 0076 CDB7      	.LM15:
 193 0078 DEB7      	/* #APP */
 194               	 ;  38 "keydeb.c" 1
 195               		cli
 196 007a 8983      	 ;  0 "" 2
  38:keydeb.c      ****   cli();					// read and clear atomic !
 197               	0,39,.LM16-.LFBB3
 198               	.LM16:
 199               	/* #NOAPP */
 200               		lds r25,key_rpt
 201 007c F894      		ldd r24,Y+1
 202               		and r24,r25
  39:keydeb.c      ****   key_mask &= key_rpt;                        	// read key(s)
 203               	+1,r24
 205               	.LM17:
 206 007e 9091 0000 		lds r25,key_rpt
 207 0082 8981      		ldd r24,Y+1
 208 0084 8923      		eor r24,r25
 209 0086 8983      		sts key_rpt,r24
  40:keydeb.c      ****   key_rpt ^= key_mask;                        	// clear key(s)
 210               		68,0,41,.LM18-.LFBB3
 211               	.LM18:
 212 0088 9091 0000 	/* #APP */
 213 008c 8981      	 ;  41 "keydeb.c" 1
 214 008e 8927      		sei
 215 0090 8093 0000 	 ;  0 "" 2
  41:keydeb.c      ****   sei();
 216               	n	68,0,42,.LM19-.LFBB3
 217               	.LM19:
 218               	/* #NOAPP */
 219               		ldd r24,Y+1
 220 0094 7894      	/* epilogue start */
  42:keydeb.c      ****   return key_mask;
 222               	
 223               		pop __tmp_reg__
 224               		pop r28
 225 0096 8981      		pop r29
 226               		ret
  43:keydeb.c      **** }
 227               	ze	get_key_rpt, .-get_key_rpt
 228               	.Lscope3:
 231 009c DF91      	.global	get_key_short
 233               	get_key_short:
 235               	.LM21:
 236               	.LFBB4:
 237               		push r29
 238               		push r28
 239               		push __tmp_reg__
  44:keydeb.c      **** 
  45:keydeb.c      **** 
  46:keydeb.c      **** uint8_t get_key_short( uint8_t key_mask )
  47:keydeb.c      **** {
 240               	L__
 241               		in r29,__SP_H__
 242               	/* prologue: function */
 243 00a0 DF93      	/* frame size = 1 */
 244 00a2 CF93      		std Y+1,r24
 246 00a6 CDB7      	.LM22:
 247 00a8 DEB7      	/* #APP */
 248               	 ;  48 "keydeb.c" 1
 249               		cli
 250 00aa 8983      	 ;  0 "" 2
  48:keydeb.c      ****   cli();			// read key state and key press atomic !
 251               	0,49,.LM23-.LFBB4
 252               	.LM23:
 253               	/* #NOAPP */
 254               		lds r24,key_state
 255 00ac F894      		mov r25,r24
 256               		com r25
  49:keydeb.c      ****   return get_key_press( ~key_state & key_mask );
 257               	24,Y+1
 258               		and r24,r25
 259               		rcall get_key_press
 260 00ae 8091 0000 	/* epilogue start */
 262 00b4 9095      	.LM24:
 263 00b6 8981      		pop __tmp_reg__
 264 00b8 8923      		pop r28
 265 00ba 00D0      		pop r29
 266               		ret
  50:keydeb.c      **** }
 267               	_key_short, .-get_key_short
 268               	.Lscope4:
 271 00c0 DF91      	.global	get_key_long
 273               	get_key_long:
 275               	.LM25:
 276               	.LFBB5:
 277               		push r29
 278               		push r28
 279               		push __tmp_reg__
  51:keydeb.c      **** 
  52:keydeb.c      **** 
  53:keydeb.c      **** uint8_t get_key_long( uint8_t key_mask )
  54:keydeb.c      **** {
 280               	L__
 281               		in r29,__SP_H__
 282               	/* prologue: function */
 283 00c4 DF93      	/* frame size = 1 */
 284 00c6 CF93      		std Y+1,r24
 286 00ca CDB7      	.LM26:
 287 00cc DEB7      		ldd r24,Y+1
 288               		rcall get_key_rpt
 289               		rcall get_key_press
 290 00ce 8983      	/* epilogue start */
  55:keydeb.c      ****   return get_key_press( get_key_rpt( key_mask ));
 291               	0,56,.LM27-.LFBB5
 292               	.LM27:
 293 00d0 8981      		pop __tmp_reg__
 294 00d2 00D0      		pop r28
 295 00d4 00D0      		pop r29
 296               		ret
  56:keydeb.c      **** }
 297               		get_key_long, .-get_key_long
 298               	.Lscope5:
 300 00d8 CF91      		.lcomm ticks.1284,1
 301 00da DF91      		.lcomm ct1.1281,1
 302 00dc 0895      		.lcomm ct0.1280,1
 304               	.global	__vector_6
 306               	__vector_6:
 308               	.Ltext2:
 310               	.LM28:
 311               	.LFBB6:
 312               		push __zero_reg__
 313               		push r0
 314               		in r0,__SREG__
   1:sig-ctc-els-CTC.c **** 
   2:sig-ctc-els-CTC.c **** /*
   3:sig-ctc-els-CTC.c **** 	Electric Lock Switch
   4:sig-ctc-els-CTC.c **** 	alpha version
   5:sig-ctc-els-CTC.c ****     26.11.2016
   6:sig-ctc-els-CTC.c **** 	Copyright Michael Prader
   7:sig-ctc-els-CTC.c **** 		
   8:sig-ctc-els-CTC.c **** 	Fuse bits on ATtiny23123
   9:sig-ctc-els-CTC.c **** 	HIGH	0x
  10:sig-ctc-els-CTC.c **** 	LOW		0x
  11:sig-ctc-els-CTC.c **** */
  12:sig-ctc-els-CTC.c **** 
  13:sig-ctc-els-CTC.c **** 
  14:sig-ctc-els-CTC.c **** //#define F_CPU     4000000
  15:sig-ctc-els-CTC.c **** 
  16:sig-ctc-els-CTC.c **** #include <avr/io.h>
  17:sig-ctc-els-CTC.c **** #include <inttypes.h>
  18:sig-ctc-els-CTC.c **** #include <avr/interrupt.h>
  19:sig-ctc-els-CTC.c **** //#include <avr/eeprom.h>
  20:sig-ctc-els-CTC.c **** 
  21:sig-ctc-els-CTC.c **** 
  22:sig-ctc-els-CTC.c **** #include "pins.h"
  23:sig-ctc-els-CTC.c **** 
  24:sig-ctc-els-CTC.c **** 
  25:sig-ctc-els-CTC.c **** #include "keydeb.c"
  26:sig-ctc-els-CTC.c **** 
  27:sig-ctc-els-CTC.c **** 
  28:sig-ctc-els-CTC.c **** #include "sig-defines.c"
  29:sig-ctc-els-CTC.c **** 
  30:sig-ctc-els-CTC.c **** 
  31:sig-ctc-els-CTC.c **** /****************************/
  32:sig-ctc-els-CTC.c **** // TIMINGS
  33:sig-ctc-els-CTC.c **** 
  34:sig-ctc-els-CTC.c **** #define SWITCH_POWER_TIMER  (4*4)       // in quarter seconds
  35:sig-ctc-els-CTC.c **** //#define TRACK_RELAIS_POWER_TIMER (1*4)  // in quarter seconds
  36:sig-ctc-els-CTC.c **** //#define LOCK_TIMEOUT_TIMER  (5*4)      // in quarter seconds
  37:sig-ctc-els-CTC.c **** 
  38:sig-ctc-els-CTC.c **** //#define ON_OFF_LOCKOUT	10			// in 10msec units
  39:sig-ctc-els-CTC.c **** 
  40:sig-ctc-els-CTC.c **** 
  41:sig-ctc-els-CTC.c **** 
  42:sig-ctc-els-CTC.c **** /****************************/
  43:sig-ctc-els-CTC.c **** 
  44:sig-ctc-els-CTC.c **** #define QUARTER_SECS_IN_10_MSEC 25
  45:sig-ctc-els-CTC.c **** 
  46:sig-ctc-els-CTC.c **** volatile uint8_t State;
  47:sig-ctc-els-CTC.c **** 
  48:sig-ctc-els-CTC.c **** #define QUARTER_SEC 0x01
  49:sig-ctc-els-CTC.c **** #define UNLOCKED    0x02
  50:sig-ctc-els-CTC.c **** #define TIMING_OUT  0x04
  51:sig-ctc-els-CTC.c **** 
  52:sig-ctc-els-CTC.c **** //volatile uint8_t OnOffLockout = ON_OFF_LOCKOUT;
  53:sig-ctc-els-CTC.c **** 
  54:sig-ctc-els-CTC.c **** #define EE_REQUESTED_POSITION_STORE_ADDRESS	0x10
  55:sig-ctc-els-CTC.c **** 
  56:sig-ctc-els-CTC.c **** void init(void);
  57:sig-ctc-els-CTC.c **** 
  58:sig-ctc-els-CTC.c **** 
  59:sig-ctc-els-CTC.c **** 
  60:sig-ctc-els-CTC.c **** ISR (TIMER0_OVF_vect)			// every 10ms
  61:sig-ctc-els-CTC.c **** {
 315               	ro_reg__
 316               		push r24
 317               		push r25
 318 00de 1F92      		push r30
 319 00e0 0F92      		push r31
 320 00e2 0FB6      		push r29
 321 00e4 0F92      		push r28
 322 00e6 1124      		rcall .
 323 00e8 8F93      		in r28,__SP_L__
 324 00ea 9F93      		in r29,__SP_H__
 325 00ec EF93      	/* prologue: Signal */
 326 00ee FF93      	/* frame size = 2 */
 328 00f2 CF93      	.LM29:
 329 00f4 00D0      		ldi r30,lo8(82)
 330 00f6 CDB7      		ldi r31,hi8(82)
 331 00f8 DEB7      		ldi r24,lo8(-40)
 332               		st Z,r24
  62:sig-ctc-els-CTC.c **** ;
  63:sig-ctc-els-CTC.c ****     // key debounce
  64:sig-ctc-els-CTC.c ****     
  65:sig-ctc-els-CTC.c ****     static uint8_t ticks = 0;
  66:sig-ctc-els-CTC.c **** 
  67:sig-ctc-els-CTC.c ****     TCNT0 = TIMER0_PRELOAD;	// preload for 10ms
  68:sig-ctc-els-CTC.c ****   
 334               	(48)
 335               		ldi r31,hi8(48)
 336 00fa E2E5      		ld r24,Z
 337 00fc F0E0      		mov r24,r24
 338 00fe 88ED      		ldi r25,lo8(0)
 339 0100 8083      		andi r24,lo8(2)
  69:sig-ctc-els-CTC.c ****  compose input register by reading various input PIN registers (PINA and PIND)
  70:sig-ctc-els-CTC.c ****     if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) keyInput |= POS_IN_KEY_DATA_BYTE_MASK; else  keyInput &= 
  71:sig-ctc-els-CTC.c ****     if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) keyInput |= UNLOCK_KEY_DATA_BYTE_MASK; else  keyInput &= 
  72:sig-ctc-els-CTC.c **** 
 340               	r25,hi8(2)
 341               		sbiw r24,0
 342 0102 E0E3      		breq .L12
 343 0104 F0E0      		ldd r24,Y+1
 344 0106 8081      		ori r24,lo8(2)
 345 0108 882F      		std Y+1,r24
 346 010a 90E0      		rjmp .L13
 347 010c 8270      	.L12:
 348 010e 9070      		ldd r24,Y+1
 349 0110 0097      		andi r24,lo8(-3)
 350 0112 01F0      		std Y+1,r24
 351 0114 8981      	.L13:
 353 0118 8983      	.LM31:
 354 011a 00C0      		ldi r30,lo8(57)
 355               		ldi r31,hi8(57)
 356 011c 8981      		ld r24,Z
 357 011e 8D7F      		mov r24,r24
 358 0120 8983      		ldi r25,lo8(0)
 359               		andi r24,lo8(2)
  73:sig-ctc-els-CTC.c ****  
 360               	iw r24,0
 361               		breq .L14
 362 0122 E9E3      		ldd r24,Y+1
 363 0124 F0E0      		ori r24,lo8(1)
 364 0126 8081      		std Y+1,r24
 365 0128 882F      		rjmp .L15
 366 012a 90E0      	.L14:
 367 012c 8270      		ldd r24,Y+1
 368 012e 9070      		andi r24,lo8(-2)
 369 0130 0097      		std Y+1,r24
 370 0132 01F0      	.L15:
 372 0136 8160      	.LM32:
 373 0138 8983      		lds r25,key_state
 374 013a 00C0      		ldd r24,Y+1
 375               		eor r24,r25
 376 013c 8981      		std Y+2,r24
 378 0140 8983      	.LM33:
 379               		lds r25,ct0.1280
  74:sig-ctc-els-CTC.c ****    k = key_state ^ keyInput;		// key changed ?  // "~" omitted for HIGH-active inputs; (LOW active:
  75:sig-ctc-els-CTC.c ****     ct0 = ~( ct0 & k );			// reset or count ct0
  76:sig-ctc-els-CTC.c ****     ct1 = ct0 ^ (ct1 & k);		// reset or count ct1
  77:sig-ctc-els-CTC.c ****     k&= ct0 & ct1;			// count until roll over ?
 380               	4,r25
 381               		com r24
 382 0142 9091 0000 		sts ct0.1280,r24
 384 0148 8927      	.LM34:
 385 014a 8A83      		lds r25,ct1.1281
  78:sig-ctc-els-CTC.c **** key_state ^= k;			// then toggle debounced state
 386               	24,Y+2
 387               		and r25,r24
 388 014c 9091 0000 		lds r24,ct0.1280
 389 0150 8A81      		eor r24,r25
 390 0152 8923      		sts ct1.1281,r24
 392 0156 8093 0000 	.LM35:
  79:sig-ctc-els-CTC.c ****    key_press |= key_state & k;		// 0->1: key press detect
 393               	5,ct0.1280
 394               		lds r24,ct1.1281
 395 015a 9091 0000 		and r25,r24
 396 015e 8A81      		ldd r24,Y+2
 397 0160 9823      		and r24,r25
 398 0162 8091 0000 		std Y+2,r24
 400 0168 8093 0000 	.LM36:
  80:sig-ctc-els-CTC.c ****    /*
 401               	,key_state
 402               		ldd r24,Y+2
 403 016c 9091 0000 		eor r24,r25
 404 0170 8091 0000 		sts key_state,r24
 406 0176 8A81      	.LM37:
 407 0178 8923      		lds r25,key_state
 408 017a 8A83      		ldd r24,Y+2
  81:sig-ctc-els-CTC.c ****    if( (key_state & REPEAT_MASK) == 0 )	// check repeat function
 409               	,r24
 410               		lds r24,key_press
 411 017c 9091 0000 		or r24,r25
 412 0180 8A81      		sts key_press,r24
 414 0184 8093 0000 	.LM38:
  82:sig-ctc-els-CTC.c ****     rpt = REPEAT_START;		// start delay
 415               	24,ticks.1284
 416               		subi r24,lo8(-(1))
 417 0188 9091 0000 		sts ticks.1284,r24
 419 018e 9823      	.LM39:
 420 0190 8091 0000 		lds r24,ticks.1284
 421 0194 892B      		cpi r24,lo8(25)
 422 0196 8093 0000 		brlo .L17
  83:sig-ctc-els-CTC.c ****    if( --rpt == 0 ){
  84:sig-ctc-els-CTC.c ****     rpt = REPEAT_NEXT;			// repeat delay
  85:sig-ctc-els-CTC.c ****     key_rpt |= key_state & REPEAT_MASK;
  86:sig-ctc-els-CTC.c ****     */
  87:sig-ctc-els-CTC.c **** 
  88:sig-ctc-els-CTC.c ****     //if (OnOffLockout) --OnOffLockout;
  89:sig-ctc-els-CTC.c ****   
  90:sig-ctc-els-CTC.c ****     ++ticks;
  91:sig-ctc-els-CTC.c **** 	if (ticks >= QUARTER_SECS_IN_10_MSEC)
  92:sig-ctc-els-CTC.c **** 	{
  93:sig-ctc-els-CTC.c **** 	   ticks = 0;
 423               	68,0,96,.LM40-.LFBB6
 424               	.LM40:
 425 019a 8091 0000 		sts ticks.1284,__zero_reg__
 427 01a0 8093 0000 	.LM41:
  94:sig-ctc-els-CTC.c **** = QUARTER_SEC;
 428               	r24,State
 429               		ori r24,lo8(1)
 430 01a4 8091 0000 		sts State,r24
 431 01a8 8931      	.L17:
 432 01aa 00F0      	/* epilogue start */
  95:sig-ctc-els-CTC.c **** }
  96:sig-ctc-els-CTC.c ****   
 433               	bn	68,0,100,.LM42-.LFBB6
 434               	.LM42:
 435 01ac 1092 0000 		pop __tmp_reg__
  97:sig-ctc-els-CTC.c **** 
 436               	p __tmp_reg__
 437               		pop r28
 438 01b0 8091 0000 		pop r29
 439 01b4 8160      		pop r31
 440 01b6 8093 0000 		pop r30
 441               		pop r25
 442               		pop r24
  98:sig-ctc-els-CTC.c **** int main(void)
  99:sig-ctc-els-CTC.c **** {
 100:sig-ctc-els-CTC.c **** 	uint8_t i;
 443               	
 444               		out __SREG__,r0
 445 01ba 0F90      		pop r0
 446 01bc 0F90      		pop __zero_reg__
 447 01be CF91      		reti
 456 01d0 1F90      	.Lscope6:
 458               	.global	main
 460               	main:
 462               	.LM43:
 463               	.LFBB7:
 464               		push r29
 465               		push r28
 466               		rcall .
 467               		rcall .
 468               		in r28,__SP_L__
 469               		in r29,__SP_H__
 470               	/* prologue: function */
 101:sig-ctc-els-CTC.c **** nt8_t SwitchRequestedPosition, SwitchReadPosition;
 102:sig-ctc-els-CTC.c **** 	uint8_t SwitchPowerTimer = 0;//, TrackRelaisPowerTimer = 0;
 103:sig-ctc-els-CTC.c **** //	uint8_t LockTimeoutTimer = 0;
 471               	n	68,0,106,.LM44-.LFBB7
 472               	.LM44:
 473               		std Y+1,__zero_reg__
 475 01d6 CF93      	.LM45:
 476 01d8 00D0      		sts State,__zero_reg__
 478 01dc CDB7      	.LM46:
 479 01de DEB7      		rcall init
 481               	.LM47:
 104:sig-ctc-els-CTC.c **** uint8_t KeyMemory = 0;
 105:sig-ctc-els-CTC.c **** 
 106:sig-ctc-els-CTC.c ****     // activate MOSFET at wakeup
 482               	8(50)
 483               		ldi r27,hi8(50)
 484 01e0 1982      		ldi r30,lo8(50)
 107:sig-ctc-els-CTC.c **** HOLD_DDR |= HOLD_MASK;
 108:sig-ctc-els-CTC.c **** //	HOLD_PORT |= HOLD_MASK;
 109:sig-ctc-els-CTC.c **** 	
 110:sig-ctc-els-CTC.c ****  
 111:sig-ctc-els-CTC.c **** 
 112:sig-ctc-els-CTC.c ****     // memorize high keys
 113:sig-ctc-els-CTC.c ****   //  if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= POS_IN_KEY_DATA_BYTE_MASK; else  KeyMemory
 114:sig-ctc-els-CTC.c ****    // if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= UNLOCK_KEY_DATA_BYTE_MASK; else  KeyMemory
 115:sig-ctc-els-CTC.c **** 	
 116:sig-ctc-els-CTC.c **** 	State = 0; // deactivate UNLOCKED, TIMING_OUT
 117:sig-ctc-els-CTC.c **** 	
 118:sig-ctc-els-CTC.c **** 	init();
 119:sig-ctc-els-CTC.c **** 	
 120:sig-ctc-els-CTC.c **** 	
 485               	i r31,hi8(50)
 486               		ld r24,Z
 487 01e2 1092 0000 		ori r24,lo8(32)
 121:sig-ctc-els-CTC.c **** stedPosition = TO_NORMAL;
 122:sig-ctc-els-CTC.c **** 	
 488               	 X,r24
 490 01e6 00D0      	.LM48:
 123:sig-ctc-els-CTC.c **** / deactivate switch motor
 124:sig-ctc-els-CTC.c **** 	SWITCH_POWER_DISABLE_PORT |= SWITCH_POWER_DISABLE_MASK;
 125:sig-ctc-els-CTC.c **** 
 126:sig-ctc-els-CTC.c ****     // deactivate relais
 127:sig-ctc-els-CTC.c **** //    TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 128:sig-ctc-els-CTC.c ****   //  TRACK_RELAIS_POWER_DISABLE_PORT &= ~TRACK_RELAIS_POWER_DISABLE_MASK;
 491               	#APP */
 492               	 ;  134 "sig-ctc-els-CTC.c" 1
 493 01e8 A2E3      		sei
 494 01ea B0E0      	 ;  0 "" 2
 496 01ee F0E0      	.LM49:
 497 01f0 8081      	/* #NOAPP */
 498 01f2 8062      		ldd r24,Y+3
 499 01f4 8C93      		cpi r24,lo8(1)
 129:sig-ctc-els-CTC.c **** sei();
 130:sig-ctc-els-CTC.c **** 	
 131:sig-ctc-els-CTC.c **** 	
 132:sig-ctc-els-CTC.c **** 	
 133:sig-ctc-els-CTC.c **** 	//if (!(eeprom_is_ready())) eeprom_busy_wait();
 134:sig-ctc-els-CTC.c **** 	//SwitchRequestedPosition = eeprom_read_byte((uint8_t *) EE_REQUESTED_POSITION_STORE_ADDRESS);
 500               	9
 501               		ldd r24,Y+3
 502               		cpi r24,lo8(2)
 503               		breq .L19
 504 01f6 7894      		ldi r24,lo8(1)
 505               		std Y+3,r24
 135:sig-ctc-els-CTC.c **** (SwitchRequestedPosition != TO_NORMAL) && (SwitchRequestedPosition != TO_REVERSE))  SwitchRequested
 136:sig-ctc-els-CTC.c **** 	
 137:sig-ctc-els-CTC.c ****     /**************************/
 138:sig-ctc-els-CTC.c ****     // TODO - could delay some 50-100 ms here?
 139:sig-ctc-els-CTC.c ****     /**************************/
 140:sig-ctc-els-CTC.c ****     
 141:sig-ctc-els-CTC.c **** 
 507               	.LM50:
 508               		ldi r24,lo8(-1)
 509 01f8 8B81      		rcall get_key_press
 510 01fa 8130      		std Y+4,r24
 512 01fe 8B81      	.LM51:
 513 0200 8230      		ldi r24,lo8(-1)
 514 0202 01F0      		rcall get_key_short
 515 0204 81E0      		std Y+4,r24
 517               	.LM52:
 142:sig-ctc-els-CTC.c **** ar any keys previously pressed
 143:sig-ctc-els-CTC.c **** 	i = get_key_press(0xFF);
 144:sig-ctc-els-CTC.c **** 	i = get_key_short(0xFF);
 145:sig-ctc-els-CTC.c **** 	i = get_key_long(0xFF);
 146:sig-ctc-els-CTC.c **** 	i = get_key_rpt(0xFF);
 147:sig-ctc-els-CTC.c **** 
 148:sig-ctc-els-CTC.c **** 	while(1)
 149:sig-ctc-els-CTC.c ****     {
 518               	(-1)
 519               		rcall get_key_long
 520 0208 8FEF      		std Y+4,r24
 522 020c 8C83      	.LM53:
 150:sig-ctc-els-CTC.c **** // MAIN LOOP
 523               	r24,lo8(-1)
 524               		rcall get_key_rpt
 525 020e 8FEF      		std Y+4,r24
 526 0210 00D0      	.L39:
 151:sig-ctc-els-CTC.c ****        
 528               	:
 529               		ldi r30,lo8(48)
 530 0214 8FEF      		ldi r31,hi8(48)
 531 0216 00D0      		ld r24,Z
 532 0218 8C83      		mov r24,r24
 152:sig-ctc-els-CTC.c ****        // read status of turnout; because of the capacitors, initial position will
 533               	r25,lo8(0)
 534               		andi r24,lo8(4)
 535 021a 8FEF      		andi r25,hi8(4)
 536 021c 00D0      		sbiw r24,0
 537 021e 8C83      		breq .L20
 538               		ldd r24,Y+2
 153:sig-ctc-els-CTC.c **** 	// be wrong until the capacitors have fully loaded
 154:sig-ctc-els-CTC.c ****     	if (SWITCH_N_PIN & SWITCH_N_MASK) SwitchReadPosition |= TO_NORMAL; else SwitchReadPosition &= 
 155:sig-ctc-els-CTC.c ****     	if (SWITCH_R_PIN & SWITCH_R_MASK) SwitchReadPosition |= TO_REVERSE; else SwitchReadPosition &=
 156:sig-ctc-els-CTC.c **** 		
 157:sig-ctc-els-CTC.c **** 		SwitchReadPosition &= TO_NORMAL | TO_REVERSE;
 158:sig-ctc-els-CTC.c **** 		
 159:sig-ctc-els-CTC.c **** 		
 160:sig-ctc-els-CTC.c ****         // read the MODE configuration switch
 539               	24,lo8(1)
 540               		std Y+2,r24
 541 0220 E0E3      		rjmp .L21
 542 0222 F0E0      	.L20:
 543 0224 8081      		ldd r24,Y+2
 544 0226 882F      		andi r24,lo8(-2)
 545 0228 90E0      		std Y+2,r24
 546 022a 8470      	.L21:
 548 022e 0097      	.LM55:
 549 0230 01F0      		ldi r30,lo8(54)
 550 0232 8A81      		ldi r31,hi8(54)
 551 0234 8160      		ld r24,Z
 552 0236 8A83      		mov r24,r24
 553 0238 00C0      		ldi r25,lo8(0)
 554               		andi r24,lo8(16)
 555 023a 8A81      		andi r25,hi8(16)
 556 023c 8E7F      		sbiw r24,0
 557 023e 8A83      		breq .L22
 558               		ldd r24,Y+2
 161:sig-ctc-els-CTC.c **** (MODE_PIN & MODE_MASK)
 559               	 Y+2,r24
 560               		rjmp .L23
 561 0240 E6E3      	.L22:
 562 0242 F0E0      		ldd r24,Y+2
 563 0244 8081      		andi r24,lo8(-3)
 564 0246 882F      		std Y+2,r24
 565 0248 90E0      	.L23:
 567 024c 9070      	.LM56:
 568 024e 0097      		ldd r24,Y+2
 569 0250 01F0      		andi r24,lo8(3)
 570 0252 8A81      		std Y+2,r24
 572 0256 8A83      	.LM57:
 573 0258 00C0      		ldi r30,lo8(54)
 574               		ldi r31,hi8(54)
 575 025a 8A81      		ld r24,Z
 576 025c 8D7F      		mov r24,r24
 577 025e 8A83      		ldi r25,lo8(0)
 578               		andi r24,lo8(4)
 162:sig-ctc-els-CTC.c **** itchReadPosition &= TO_NORMAL | TO_REVERSE;
 163:sig-ctc-els-CTC.c **** 		
 579               	iw r24,0
 580               		breq .L24
 582 0262 8370      	.LM58:
 583 0264 8A83      		ldi r30,lo8(48)
 164:sig-ctc-els-CTC.c **** 
 165:sig-ctc-els-CTC.c ****         // read the MODE configuration switch
 166:sig-ctc-els-CTC.c ****     	if (MODE_PIN & MODE_MASK)
 167:sig-ctc-els-CTC.c ****     	{
 584               	r31,hi8(48)
 585               		ld r24,Z
 586 0266 E6E3      		mov r24,r24
 587 0268 F0E0      		ldi r25,lo8(0)
 588 026a 8081      		andi r24,lo8(1)
 589 026c 882F      		andi r25,hi8(1)
 590 026e 90E0      		tst r24
 591 0270 8470      		breq .L25
 592 0272 9070      		ldi r24,lo8(2)
 593 0274 0097      		std Y+3,r24
 594 0276 01F0      		rjmp .L26
 168:sig-ctc-els-CTC.c ****  	    // SW1 is high (off)
 169:sig-ctc-els-CTC.c ****     	    // in this mode, we work according to CTC input
 170:sig-ctc-els-CTC.c ****     	    // if the TO_REQ_REVERSE output on the CTC controller is high, set switch to REVERSE
 171:sig-ctc-els-CTC.c ****     	    if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPo
 172:sig-ctc-els-CTC.c ****     	    
 595               	r24,lo8(1)
 596               		std Y+3,r24
 597 0278 E0E3      	.L26:
 599 027c 8081      	.LM59:
 600 027e 882F      		ldi r24,lo8(2)
 601 0280 90E0      		rcall get_key_press
 602 0282 8170      		tst r24
 603 0284 9070      		breq .L27
 605 0288 01F0      	.LM60:
 606 028a 82E0      	/* #APP */
 607 028c 8B83      	 ;  177 "sig-ctc-els-CTC.c" 1
 608 028e 00C0      		nop
 609               	 ;  0 "" 2
 610 0290 81E0      	/* #NOAPP */
 611 0292 8B83      	.L27:
 173:sig-ctc-els-CTC.c ****  if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPosition =
 174:sig-ctc-els-CTC.c ****     	    
 613               	8(56)
 614               		ldi r27,hi8(56)
 615 0294 82E0      		ldi r30,lo8(56)
 616 0296 00D0      		ldi r31,hi8(56)
 617 0298 8823      		ld r24,Z
 618 029a 01F0      		ori r24,lo8(1)
 175:sig-ctc-els-CTC.c ****  if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPosition =
 176:sig-ctc-els-CTC.c ****     	    
 177:sig-ctc-els-CTC.c ****     	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 619               	r24
 621               	.LM62:
 622               		ldi r26,lo8(56)
 623 029c 0000      		ldi r27,hi8(56)
 624               		ldi r30,lo8(56)
 625               		ldi r31,hi8(56)
 626               		ld r24,Z
 178:sig-ctc-els-CTC.c **** O_REVERSE; else SwitchRequestedPosition = TO_NORMAL;
 179:sig-ctc-els-CTC.c ****     	    
 180:sig-ctc-els-CTC.c ****     	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 627               	,lo8(2)
 628               		st X,r24
 629 029e A8E3      		rjmp .L28
 630 02a0 B0E0      	.L24:
 632 02a4 F0E0      	.LM63:
 633 02a6 8081      		ldi r24,lo8(2)
 634 02a8 8160      		rcall get_key_press
 635 02aa 8C93      		tst r24
 181:sig-ctc-els-CTC.c **** O_REVERSE; else SwitchRequestedPosition = TO_NORMAL;
 636               	8
 638 02ac A8E3      	.LM64:
 639 02ae B0E0      		ldd r24,Y+3
 640 02b0 E8E3      		cpi r24,lo8(1)
 641 02b2 F0E0      		brne .L29
 642 02b4 8081      		ldi r24,lo8(2)
 643 02b6 8260      		std Y+3,r24
 644 02b8 8C93      		rjmp .L28
 645 02ba 00C0      	.L29:
 646               		ldd r24,Y+3
 182:sig-ctc-els-CTC.c **** SE
 183:sig-ctc-els-CTC.c ****     	    if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPo
 184:sig-ctc-els-CTC.c ****     	    
 185:sig-ctc-els-CTC.c ****     	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 186:sig-ctc-els-CTC.c ****             {
 187:sig-ctc-els-CTC.c ****                 // clear a key pressed
 647               	8(2)
 648               		brne .L28
 649 02bc 82E0      		ldi r24,lo8(1)
 650 02be 00D0      		std Y+3,r24
 651 02c0 8823      	.L28:
 188:sig-ctc-els-CTC.c ****   	    
 189:sig-ctc-els-CTC.c ****     	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 190:sig-ctc-els-CTC.c ****             {
 653               	
 654               		ldd r24,Y+3
 655 02c4 8B81      		cpi r24,lo8(1)
 656 02c6 8130      		brne .L30
 657 02c8 01F4      		ldi r26,lo8(50)
 658 02ca 82E0      		ldi r27,hi8(50)
 659 02cc 8B83      		ldi r30,lo8(50)
 660 02ce 00C0      		ldi r31,hi8(50)
 661               		ld r24,Z
 662 02d0 8B81      		ori r24,lo8(8)
 663 02d2 8230      		st X,r24
 664 02d4 01F4      		rjmp .L31
 665 02d6 81E0      	.L30:
 666 02d8 8B83      		ldi r26,lo8(50)
 667               		ldi r27,hi8(50)
 191:sig-ctc-els-CTC.c ****  SwitchRequestedPosition = TO_NORMAL;
 192:sig-ctc-els-CTC.c ****     	    
 193:sig-ctc-els-CTC.c ****     	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 194:sig-ctc-els-CTC.c ****             {
 195:sig-ctc-els-CTC.c ****                 // clear a key pressed
 196:sig-ctc-els-CTC.c ****                 asm("nop");
 668               	0)
 669               		ldi r31,hi8(50)
 670 02da 8B81      		ld r24,Z
 671 02dc 8130      		andi r24,lo8(-9)
 672 02de 01F4      		st X,r24
 673 02e0 A2E3      	.L31:
 675 02e4 E2E3      	.LM66:
 676 02e6 F0E0      		ldd r24,Y+3
 677 02e8 8081      		cpi r24,lo8(1)
 678 02ea 8860      		brne .L32
 680 02ee 00C0      	.LM67:
 681               		ldi r26,lo8(56)
 682 02f0 A2E3      		ldi r27,hi8(56)
 683 02f2 B0E0      		ldi r30,lo8(56)
 684 02f4 E2E3      		ldi r31,hi8(56)
 685 02f6 F0E0      		ld r24,Z
 686 02f8 8081      		andi r24,lo8(-2)
 687 02fa 877F      		st X,r24
 689               	.LM68:
 197:sig-ctc-els-CTC.c **** _press( POS_IN_KEY_DATA_BYTE_MASK))
 198:sig-ctc-els-CTC.c ****             {
 690               	r27,hi8(56)
 691               		ldi r30,lo8(56)
 692 02fe 8B81      		ldi r31,hi8(56)
 693 0300 8130      		ld r24,Z
 694 0302 01F4      		ori r24,lo8(2)
 199:sig-ctc-els-CTC.c ****  SwitchRequestedPosition = TO_NORMAL;
 200:sig-ctc-els-CTC.c ****     	    
 695               	,r24
 696               		rjmp .L33
 697 0304 A8E3      	.L32:
 699 0308 E8E3      	.LM69:
 700 030a F0E0      		ldd r24,Y+3
 701 030c 8081      		cpi r24,lo8(2)
 702 030e 8E7F      		brne .L33
 201:sig-ctc-els-CTC.c ****  if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPosition =
 704               	di r26,lo8(56)
 705               		ldi r27,hi8(56)
 706 0312 A8E3      		ldi r30,lo8(56)
 707 0314 B0E0      		ldi r31,hi8(56)
 708 0316 E8E3      		ld r24,Z
 709 0318 F0E0      		ori r24,lo8(1)
 710 031a 8081      		st X,r24
 712 031e 8C93      	.LM71:
 713 0320 00C0      		ldi r26,lo8(56)
 714               		ldi r27,hi8(56)
 202:sig-ctc-els-CTC.c **** SE
 715               	8(56)
 716               		ldi r31,hi8(56)
 717 0322 8B81      		ld r24,Z
 718 0324 8230      		andi r24,lo8(-3)
 719 0326 01F4      		st X,r24
 203:sig-ctc-els-CTC.c ****  work according to CTC input
 720               	o8(56)
 721               		ldi r27,hi8(56)
 722 0328 A8E3      		ldi r30,lo8(56)
 723 032a B0E0      		ldi r31,hi8(56)
 724 032c E8E3      		ld r24,Z
 725 032e F0E0      		ori r24,lo8(1)
 726 0330 8081      		st X,r24
 728 0334 8C93      	.LM71:
 204:sig-ctc-els-CTC.c ****    	if (MODE_PIN & MODE_MASK)
 729               	lo8(56)
 730               		ldi r27,hi8(56)
 731 0336 A8E3      		ldi r30,lo8(56)
 732 0338 B0E0      		ldi r31,hi8(56)
 733 033a E8E3      		ld r24,Z
 734 033c F0E0      		andi r24,lo8(-3)
 735 033e 8081      		st X,r24
 736 0340 8D7F      	.L33:
 738               	.LM72:
 205:sig-ctc-els-CTC.c **** itchReadPosition &= TO_NORMAL | TO_REVERSE;
 206:sig-ctc-els-CTC.c **** 		
 207:sig-ctc-els-CTC.c **** 		
 208:sig-ctc-els-CTC.c ****         // read the MODE configuration switch
 739               	r31,hi8(56)
 740               		ld r24,Z
 741 0344 9B81      		ori r24,lo8(1)
 742 0346 8A81      		st X,r24
 744 034a 01F0      	.LM71:
 209:sig-ctc-els-CTC.c **** 	if (MODE_PIN & MODE_MASK)
 210:sig-ctc-els-CTC.c ****     	{
 211:sig-ctc-els-CTC.c ****     	    // SW1 is high (off)
 745               	26,lo8(56)
 746               		ldi r27,hi8(56)
 747 034c 80E1      		ldi r30,lo8(56)
 748 034e 8983      		ldi r31,hi8(56)
 749               		ld r24,Z
 212:sig-ctc-els-CTC.c **** RSE;
 213:sig-ctc-els-CTC.c **** 		
 214:sig-ctc-els-CTC.c **** 		
 750               	.LM70-.LFBB7
 751               	.LM70:
 752 0350 8981      		ldi r26,lo8(56)
 753 0352 8823      		ldi r27,hi8(56)
 754 0354 01F0      		ldi r30,lo8(56)
 755 0356 A2E3      		ldi r31,hi8(56)
 756 0358 B0E0      		ld r24,Z
 757 035a E2E3      		ori r24,lo8(1)
 758 035c F0E0      		st X,r24
 760 0360 8F7D      	.LM71:
 761 0362 8C93      		ldi r26,lo8(56)
 762 0364 00C0      		ldi r27,hi8(56)
 763               		ldi r30,lo8(56)
 764 0366 A2E3      		ldi r31,hi8(56)
 765 0368 B0E0      		ld r24,Z
 766 036a E2E3      		andi r24,lo8(-3)
 767 036c F0E0      		st X,r24
 768 036e 8081      	.L33:
 770 0372 8C93      	.LM72:
 771               		ldd r25,Y+3
 215:sig-ctc-els-CTC.c ****      // read the MODE configuration switch
 216:sig-ctc-els-CTC.c ****     	if (MODE_PIN & MODE_MASK)
 217:sig-ctc-els-CTC.c ****     	{
 218:sig-ctc-els-CTC.c ****     	    // SW1 is high (off)
 772               	24
 773               		breq .L34
 775 0378 882F      	.LM73:
 776 037a 90E0      		ldi r24,lo8(16)
 777 037c 8170      		std Y+1,r24
 778 037e 9070      	.L34:
 780 0382 01F4      	.LM74:
 781 0384 00C0      		ldd r24,Y+1
 219:sig-ctc-els-CTC.c **** 	    // in this mode, we work according to CTC input
 220:sig-ctc-els-CTC.c ****     	    // if the TO_REQ_REVERSE output on the CTC controller is high, set switch to REVERSE
 782               	 X,r24
 783               	.L33:
 785 0388 8823      	.LM72:
 786 038a 01F0      		ldd r25,Y+3
 787 038c 8981      		ldd r24,Y+2
 788 038e 8150      		cp r25,r24
 789 0390 8983      		breq .L34
 221:sig-ctc-els-CTC.c ****  work according to CTC input
 222:sig-ctc-els-CTC.c ****     	    // if the TO_REQ_REVERSE output on the CTC controller is high, set switch to REVERSE
 223:sig-ctc-els-CTC.c ****     	    if (CTC_IN_PIN & CTC_IN_MASK) SwitchRequestedPosition = TO_REVERSE; else SwitchRequestedPo
 224:sig-ctc-els-CTC.c ****     	    
 225:sig-ctc-els-CTC.c ****     	    if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 226:sig-ctc-els-CTC.c ****             {
 227:sig-ctc-els-CTC.c ****                 // clear a key pressed
 228:sig-ctc-els-CTC.c ****                 asm("nop");
 229:sig-ctc-els-CTC.c ****             }
 230:sig-ctc-els-CTC.c ****             
 231:sig-ctc-els-CTC.c ****             LED_0N_PORT |= LED_0N_MASK;
 232:sig-ctc-els-CTC.c ****             LED_1R_PORT |= LED_1R_MASK;
 233:sig-ctc-els-CTC.c ****             
 234:sig-ctc-els-CTC.c ****     	} else {
 235:sig-ctc-els-CTC.c ****     	    // SW1 is low (on)
 791               	
 792               		ldi r26,lo8(56)
 793 0392 8091 0000 		ldi r27,hi8(56)
 794 0396 8E7F      		ldi r30,lo8(56)
 795 0398 8093 0000 		ldi r31,hi8(56)
 796 039c 00C0      		ld r24,Z
 797               		andi r24,lo8(-3)
 798               		st X,r24
 799               	.L33:
 801               	.LM72:
 802               		ldd r25,Y+3
 803               		ldd r24,Y+2
 804               		cp r25,r24
 805               		breq .L34
 807               	.LM73:
 808               		ldi r24,lo8(16)
 236:sig-ctc-els-CTC.c **** = LED_0N_MASK;
 237:sig-ctc-els-CTC.c ****             LED_1R_PORT |= LED_1R_MASK;
 238:sig-ctc-els-CTC.c ****             
 239:sig-ctc-els-CTC.c ****     	} else {
 240:sig-ctc-els-CTC.c ****     	    // SW1 is low (on)
 241:sig-ctc-els-CTC.c ****     	    // in this mode, we disregard CTC input and activate manual control
 242:sig-ctc-els-CTC.c **** 			
 243:sig-ctc-els-CTC.c ****             if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))// || (KeyMemory & POS_IN_KEY_DATA_BYTE_
 244:sig-ctc-els-CTC.c ****             {
 245:sig-ctc-els-CTC.c ****                 // key pressed, toggle switch position; in this mode, no lock is simulated
 246:sig-ctc-els-CTC.c ****                 if (SwitchRequestedPosition == TO_NORMAL) SwitchRequestedPosition = TO_REVERSE; els
 247:sig-ctc-els-CTC.c ****                 // clear stored key at startup
 248:sig-ctc-els-CTC.c ****                 //KeyMemory &= ~POS_IN_KEY_DATA_BYTE_MASK;
 249:sig-ctc-els-CTC.c ****             }
 250:sig-ctc-els-CTC.c ****     	}
 251:sig-ctc-els-CTC.c ****     	
 252:sig-ctc-els-CTC.c ****     	if (SwitchRequestedPosition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_
 253:sig-ctc-els-CTC.c ****     	
 809               	,hi8(56)
 810               		ldi r30,lo8(56)
 811               		ldi r31,hi8(56)
 812 039e DF93      		ld r24,Z
 813 03a0 CF93      		andi r24,lo8(-3)
 814 03a2 CDB7      		st X,r24
 815 03a4 DEB7      	.L33:
 817               	.LM72:
 254:sig-ctc-els-CTC.c **** = TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 255:sig-ctc-els-CTC.c ****     	
 818               	r31,hi8(56)
 819               		ld r24,Z
 820 03a6 E8E2      		ori r24,lo8(1)
 821 03a8 F0E0      		st X,r24
 823 03ac 8083      	.LM71:
 256:sig-ctc-els-CTC.c **** = TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 257:sig-ctc-els-CTC.c ****     	
 258:sig-ctc-els-CTC.c ****         if (SwitchRequestedPosition == TO_NORMAL)
 259:sig-ctc-els-CTC.c ****         {
 260:sig-ctc-els-CTC.c ****             LED_0N_PORT &= ~LED_0N_MASK;
 824               	26,lo8(56)
 825               		ldi r27,hi8(56)
 826 03ae A2E3      		ldi r30,lo8(56)
 827 03b0 B0E0      		ldi r31,hi8(56)
 828 03b2 E2E3      		ld r24,Z
 829 03b4 F0E0      		andi r24,lo8(-3)
 830 03b6 8081      		st X,r24
 831 03b8 8E7F      	.L33:
 261:sig-ctc-els-CTC.c ****  if (SwitchRequestedPosition == TO_NORMAL)
 833               	6)
 834               		ldi r31,hi8(56)
 835 03bc A1E3      		ld r24,Z
 836 03be B0E0      		ori r24,lo8(1)
 837 03c0 E1E3      		st X,r24
 839 03c4 8081      	.LM71:
 840 03c6 8E7F      		ldi r26,lo8(56)
 841 03c8 8C93      		ldi r27,hi8(56)
 262:sig-ctc-els-CTC.c **** se SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 263:sig-ctc-els-CTC.c ****     	
 842               	lo8(56)
 843               		ldi r31,hi8(56)
 844 03ca A8E3      		ld r24,Z
 845 03cc B0E0      		andi r24,lo8(-3)
 846 03ce E8E3      		st X,r24
 847 03d0 F0E0      	.L33:
 849 03d4 8B7F      	.LM72:
 850 03d6 8C93      		ldd r25,Y+3
 264:sig-ctc-els-CTC.c **** = TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 851               	d r24,Z
 852               		ori r24,lo8(1)
 853 03d8 A7E3      		st X,r24
 855 03dc E7E3      	.LM71:
 856 03de F0E0      		ldi r26,lo8(56)
 857 03e0 8081      		ldi r27,hi8(56)
 858 03e2 8B7F      		ldi r30,lo8(56)
 859 03e4 8C93      		ldi r31,hi8(56)
 265:sig-ctc-els-CTC.c **** ition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 266:sig-ctc-els-CTC.c ****     	
 860               	
 861               		andi r24,lo8(-3)
 862 03e6 A2E3      		st X,r24
 863 03e8 B0E0      	.L33:
 865 03ec F0E0      	.LM72:
 866 03ee 8081      		ldd r25,Y+3
 867 03f0 8B7F      		ldd r24,Y+2
 868 03f2 8C93      		cp r25,r24
 267:sig-ctc-els-CTC.c **** = TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 869               	 X,r24
 871 03f4 A1E3      	.LM71:
 872 03f6 B0E0      		ldi r26,lo8(56)
 873 03f8 E1E3      		ldi r27,hi8(56)
 874 03fa F0E0      		ldi r30,lo8(56)
 875 03fc 8081      		ldi r31,hi8(56)
 876 03fe 8B7F      		ld r24,Z
 877 0400 8C93      		andi r24,lo8(-3)
 268:sig-ctc-els-CTC.c **** ition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 269:sig-ctc-els-CTC.c ****     	
 878               	
 879               	.L33:
 881 0404 B0E0      	.LM72:
 882 0406 E8E3      		ldd r25,Y+3
 883 0408 F0E0      		ldd r24,Y+2
 884 040a 8081      		cp r25,r24
 885 040c 8F7E      		breq .L34
 270:sig-ctc-els-CTC.c **** = TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 887               	
 888               		ldi r26,lo8(56)
 889 0410 A7E3      		ldi r27,hi8(56)
 890 0412 B0E0      		ldi r30,lo8(56)
 891 0414 E7E3      		ldi r31,hi8(56)
 892 0416 F0E0      		ld r24,Z
 893 0418 8081      		andi r24,lo8(-3)
 894 041a 8F7E      		st X,r24
 895 041c 8C93      	.L33:
 271:sig-ctc-els-CTC.c **** ition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 272:sig-ctc-els-CTC.c ****     	
 273:sig-ctc-els-CTC.c ****         if (SwitchRequestedPosition == TO_NORMAL)
 896               		ldi r27,hi8(56)
 897               		ldi r30,lo8(56)
 898 041e A1E3      		ldi r31,hi8(56)
 899 0420 B0E0      		ld r24,Z
 900 0422 E1E3      		ori r24,lo8(1)
 901 0424 F0E0      		st X,r24
 903 0428 8860      	.LM71:
 904 042a 8C93      		ldi r26,lo8(56)
 274:sig-ctc-els-CTC.c **** se SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 275:sig-ctc-els-CTC.c ****     	
 276:sig-ctc-els-CTC.c ****         if (SwitchRequestedPosition == TO_NORMAL)
 905               	hi8(56)
 906               		ldi r30,lo8(56)
 907 042c A1E3      		ldi r31,hi8(56)
 908 042e B0E0      		ld r24,Z
 909 0430 E1E3      		andi r24,lo8(-3)
 910 0432 F0E0      		st X,r24
 911 0434 8081      	.L33:
 913 0438 8C93      	.LM72:
 277:sig-ctc-els-CTC.c **** se SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 278:sig-ctc-els-CTC.c ****     	
 279:sig-ctc-els-CTC.c ****         if (SwitchRequestedPosition == TO_NORMAL)
 914               	r31,hi8(56)
 915               		ld r24,Z
 916 043a A8E3      		ori r24,lo8(1)
 917 043c B0E0      		st X,r24
 919 0440 F0E0      	.LM71:
 920 0442 8081      		ldi r26,lo8(56)
 921 0444 8160      		ldi r27,hi8(56)
 922 0446 8C93      		ldi r30,lo8(56)
 280:sig-ctc-els-CTC.c **** se SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 923               	hi8(56)
 924               		ld r24,Z
 925 0448 A7E3      		andi r24,lo8(-3)
 926 044a B0E0      		st X,r24
 927 044c E7E3      	.L33:
 929 0450 8081      	.LM72:
 930 0452 8160      		ldd r25,Y+3
 931 0454 8C93      		ldd r24,Y+2
 281:sig-ctc-els-CTC.c **** ition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 282:sig-ctc-els-CTC.c ****     	
 932               	24,lo8(1)
 933               		st X,r24
 935 0458 B0E0      	.LM71:
 936 045a E8E3      		ldi r26,lo8(56)
 937 045c F0E0      		ldi r27,hi8(56)
 938 045e 8081      		ldi r30,lo8(56)
 939 0460 8260      		ldi r31,hi8(56)
 940 0462 8C93      		ld r24,Z
 283:sig-ctc-els-CTC.c **** = TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 941               	,lo8(-3)
 942               		st X,r24
 943 0464 A7E3      	.L33:
 945 0468 E7E3      	.LM72:
 946 046a F0E0      		ldd r25,Y+3
 947 046c 8081      		ldd r24,Y+2
 948 046e 8260      		cp r25,r24
 949 0470 8C93      		breq .L34
 284:sig-ctc-els-CTC.c **** ition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 285:sig-ctc-els-CTC.c ****     	
 286:sig-ctc-els-CTC.c ****         if (SwitchRequestedPosition == TO_NORMAL)
 287:sig-ctc-els-CTC.c ****         {
 950               	bn	68,0,204,.LM71-.LFBB7
 951               	.LM71:
 952 0472 00D0      		ldi r26,lo8(56)
 953               		ldi r27,hi8(56)
 288:sig-ctc-els-CTC.c **** OS_PORT &= ~SWITCH_POS_MASK;
 289:sig-ctc-els-CTC.c ****     	
 954               	 r30,lo8(56)
 955               		ldi r31,hi8(56)
 956 0474 CF91      		ld r24,Z
 957 0476 DF91      		andi r24,lo8(-3)
 958 0478 0895      		st X,r24
 959               	.L33:
 961               	.LM72:
 962               		ldd r25,Y+3
 963               		ldd r24,Y+2
 964               		cp r25,r24
 965               		breq .L34
 967               	.LM73:
 968               		ldi r24,lo8(16)
 969               		std Y+1,r24
 970               	.L34:
 972               	.LM74:
 973               		ldd r24,Y+1
 974               		tst r24
DEFINED SYMBOLS
                            *ABS*:00000000 sig-ctc-els-CTC.c
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:2      *ABS*:0000003f __SREG__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:3      *ABS*:0000003e __SP_H__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:4      *ABS*:0000003d __SP_L__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:5      *ABS*:00000034 __CCP__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:6      *ABS*:00000000 __tmp_reg__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:7      *ABS*:00000001 __zero_reg__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:72     .text:00000000 KeysInit
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:131    .text:00000040 get_key_press
                            *COM*:00000001 key_press
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:185    .text:00000070 get_key_rpt
                            *COM*:00000001 key_rpt
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:239    .text:000000a0 get_key_short
                            *COM*:00000001 key_state
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:279    .text:000000c4 get_key_long
                             .bss:00000000 ticks.1284
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:306    .bss:00000001 ct1.1281
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:307    .bss:00000002 ct0.1280
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:312    .text:000000de __vector_6
                            *COM*:00000001 State
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:470    .text:000001d4 main
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccWJJKhg.s:808    .text:0000039e init

UNDEFINED SYMBOLS
__do_clear_bss
