   1               		.file	"sig-ctc-els-ELS.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  77               	.global	KeysInit
  79               	KeysInit:
  81               	.Ltext1:
   1:keydeb.c      **** 
   2:keydeb.c      **** 
   3:keydeb.c      **** #include "keydeb.h"
   4:keydeb.c      **** 
   5:keydeb.c      **** volatile uint8_t key_state;				// debounced and inverted key state:
   6:keydeb.c      **** 					// bit = 1: key pressed
   7:keydeb.c      **** volatile uint8_t key_press;				// key press detect
   8:keydeb.c      **** 
   9:keydeb.c      **** volatile uint8_t key_rpt;				// key long press and repeat
  10:keydeb.c      **** 
  11:keydeb.c      **** 
  12:keydeb.c      **** void KeysInit(void)
  13:keydeb.c      **** {
  82               	n r29,__SP_H__
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  86 0002 CF93      	.LM1:
  87 0004 CDB7      		ldi r30,lo8(80)
  88 0006 DEB7      		ldi r31,hi8(80)
  89               		st Z,__zero_reg__
  14:keydeb.c      **** 
  15:keydeb.c      **** 	TCCR0A = 0;		// no OC, TOV at MAX, MAX is 0xFF	
  91               	i r30,lo8(83)
  92               		ldi r31,hi8(83)
  93 0008 E0E5      		ldi r24,lo8(5)
  94 000a F0E0      		st Z,r24
  16:keydeb.c      **** 	TCCR0B = 0 | _BV(CS02) | _BV(CS00);		// divide by 1024
  96               	
  97               		ldi r30,lo8(89)
  98 000e E3E5      		ldi r31,hi8(89)
  99 0010 F0E0      		ldi r24,lo8(2)
 100 0012 85E0      		st Z,r24
  17:keydeb.c      **** 	TIMSK = _BV(TOIE0);									// enable timer interrupt
 102               	
 103               		ldi r26,lo8(50)
 104 0016 E9E5      		ldi r27,hi8(50)
 105 0018 F0E0      		ldi r30,lo8(50)
 106 001a 82E0      		ldi r31,hi8(50)
 107 001c 8083      		ld r24,Z
  18:keydeb.c      **** 	
  19:keydeb.c      **** 	POS_IN_KEY_PORT &= ~POS_IN_KEY_MASK;
 108               	 r24,lo8(-3)
 109               		st X,r24
 111 0020 B0E0      	.LM5:
 112 0022 E2E3      		ldi r26,lo8(49)
 113 0024 F0E0      		ldi r27,hi8(49)
 114 0026 8081      		ldi r30,lo8(49)
 115 0028 8D7F      		ldi r31,hi8(49)
 116 002a 8C93      		ld r24,Z
  20:keydeb.c      **** 	POS_IN_KEY_DDR &= ~POS_IN_KEY_MASK;
 117               	,lo8(-3)
 118               		st X,r24
 119 002c A1E3      	/* epilogue start */
 121 0030 E1E3      	.LM6:
 122 0032 F0E0      		pop r28
 123 0034 8081      		pop r29
 124 0036 8D7F      		ret
 126               	.Lscope1:
  21:keydeb.c      ****     //UNLOCK_KEY_PORT &= ~UNLOCK_KEY_MASK;
  22:keydeb.c      ****     //UNLCOK_KEY_DDR &= ~UNLOCK_KEY_MASK;
  23:keydeb.c      **** }
 127               	et_key_press:F(4,2)",36,0,0,get_key_press
 129 003a CF91      	.global	get_key_press
 131 003e 0895      	get_key_press:
 133               	.LM7:
 134               	.LFBB2:
 135               		push r29
 136               		push r28
 137               		push __tmp_reg__
 138               		in r28,__SP_L__
  24:keydeb.c      **** 
  25:keydeb.c      **** 
  26:keydeb.c      **** uint8_t get_key_press( uint8_t key_mask )
  27:keydeb.c      **** {
 139               	_H__
 140               	/* prologue: function */
 141               	/* frame size = 1 */
 142 0040 DF93      		std Y+1,r24
 144 0044 0F92      	.LM8:
 145 0046 CDB7      	/* #APP */
 146 0048 DEB7      	 ;  28 "keydeb.c" 1
 147               		cli
 148               	 ;  0 "" 2
  28:keydeb.c      ****   cli();					// read and clear atomic !
 150               	OAPP */
 151               		lds r25,key_press
 152               		ldd r24,Y+1
 153               		and r24,r25
 154 004c F894      		std Y+1,r24
  29:keydeb.c      ****   key_mask &= key_press;                        // read key(s)
 156               	
 157               		lds r25,key_press
 158               		ldd r24,Y+1
 159 004e 9091 0000 		eor r24,r25
 160 0052 8981      		sts key_press,r24
 162 0056 8983      	.LM11:
  30:keydeb.c      ****   key_press ^= key_mask;                        // clear key(s)
 163               	P */
 164               	 ;  31 "keydeb.c" 1
 165 0058 9091 0000 		sei
 166 005c 8981      	 ;  0 "" 2
 168 0060 8093 0000 	.LM12:
  31:keydeb.c      ****   sei();
 169               	APP */
 170               		ldd r24,Y+1
 171               	/* epilogue start */
 173 0064 7894      	.LM13:
 174               		pop __tmp_reg__
  32:keydeb.c      ****   return key_mask;
 175               	28
 176               		pop r29
 177               		ret
 179               	.Lscope2:
  33:keydeb.c      **** }
 180               	bs	"get_key_rpt:F(4,2)",36,0,0,get_key_rpt
 182 0068 0F90      	.global	get_key_rpt
 184 006c DF91      	get_key_rpt:
 186               	.LM14:
 187               	.LFBB3:
 188               		push r29
 189               		push r28
 190               		push __tmp_reg__
 191               		in r28,__SP_L__
 192               		in r29,__SP_H__
  34:keydeb.c      **** 
  35:keydeb.c      **** 
  36:keydeb.c      **** uint8_t get_key_rpt( uint8_t key_mask )
  37:keydeb.c      **** {
 193               	function */
 194               	/* frame size = 1 */
 195               		std Y+1,r24
 197 0072 CF93      	.LM15:
 198 0074 0F92      	/* #APP */
 199 0076 CDB7      	 ;  38 "keydeb.c" 1
 200 0078 DEB7      		cli
 201               	 ;  0 "" 2
 203 007a 8983      	.LM16:
  38:keydeb.c      ****   cli();					// read and clear atomic !
 204               	/
 205               		lds r25,key_rpt
 206               		ldd r24,Y+1
 207               		and r24,r25
 208 007c F894      		std Y+1,r24
  39:keydeb.c      ****   key_mask &= key_rpt;                        	// read key(s)
 210               	
 211               		lds r25,key_rpt
 212               		ldd r24,Y+1
 213 007e 9091 0000 		eor r24,r25
 214 0082 8981      		sts key_rpt,r24
 216 0086 8983      	.LM18:
  40:keydeb.c      ****   key_rpt ^= key_mask;                        	// clear key(s)
 217               	P */
 218               	 ;  41 "keydeb.c" 1
 219 0088 9091 0000 		sei
 220 008c 8981      	 ;  0 "" 2
 222 0090 8093 0000 	.LM19:
  41:keydeb.c      ****   sei();
 223               	APP */
 224               		ldd r24,Y+1
 225               	/* epilogue start */
 227 0094 7894      	.LM20:
 228               		pop __tmp_reg__
  42:keydeb.c      ****   return key_mask;
 229               	28
 230               		pop r29
 231               		ret
 233               	.Lscope3:
  43:keydeb.c      **** }
 234               	bs	"get_key_short:F(4,2)",36,0,0,get_key_short
 236 0098 0F90      	.global	get_key_short
 238 009c DF91      	get_key_short:
 240               	.LM21:
 241               	.LFBB4:
 242               		push r29
 243               		push r28
 244               		push __tmp_reg__
 245               		in r28,__SP_L__
 246               		in r29,__SP_H__
  44:keydeb.c      **** 
  45:keydeb.c      **** 
  46:keydeb.c      **** uint8_t get_key_short( uint8_t key_mask )
  47:keydeb.c      **** {
 247               	function */
 248               	/* frame size = 1 */
 249               		std Y+1,r24
 251 00a2 CF93      	.LM22:
 252 00a4 0F92      	/* #APP */
 253 00a6 CDB7      	 ;  48 "keydeb.c" 1
 254 00a8 DEB7      		cli
 255               	 ;  0 "" 2
 257 00aa 8983      	.LM23:
  48:keydeb.c      ****   cli();			// read key state and key press atomic !
 258               	/
 259               		lds r24,key_state
 260               		mov r25,r24
 261               		com r25
 262 00ac F894      		ldd r24,Y+1
 263               		and r24,r25
  49:keydeb.c      ****   return get_key_press( ~key_state & key_mask );
 264               	 get_key_press
 265               	/* epilogue start */
 267 00ae 8091 0000 	.LM24:
 268 00b2 982F      		pop __tmp_reg__
 269 00b4 9095      		pop r28
 270 00b6 8981      		pop r29
 271 00b8 8923      		ret
 273               	.Lscope4:
  50:keydeb.c      **** }
 274               	et_key_long:F(4,2)",36,0,0,get_key_long
 276 00bc 0F90      	.global	get_key_long
 278 00c0 DF91      	get_key_long:
 280               	.LM25:
 281               	.LFBB5:
 282               		push r29
 283               		push r28
 284               		push __tmp_reg__
 285               		in r28,__SP_L__
 286               		in r29,__SP_H__
  51:keydeb.c      **** 
  52:keydeb.c      **** 
  53:keydeb.c      **** uint8_t get_key_long( uint8_t key_mask )
  54:keydeb.c      **** {
 287               	function */
 288               	/* frame size = 1 */
 289               		std Y+1,r24
 291 00c6 CF93      	.LM26:
 292 00c8 0F92      		ldd r24,Y+1
 293 00ca CDB7      		rcall get_key_rpt
 294 00cc DEB7      		rcall get_key_press
 295               	/* epilogue start */
 297 00ce 8983      	.LM27:
  55:keydeb.c      ****   return get_key_press( get_key_rpt( key_mask ));
 298               	reg__
 299               		pop r28
 300 00d0 8981      		pop r29
 301 00d2 00D0      		ret
 303               	.Lscope5:
  56:keydeb.c      **** }
 304               	n	162,0,0,0
 305               		.lcomm ticks.1331,1
 306 00d6 0F90      		.lcomm ct1.1328,1
 307 00d8 CF91      		.lcomm ct0.1327,1
 309 00dc 0895      	.global	__vector_6
 311               	__vector_6:
 313               	.Ltext2:
 315               	.LM28:
 316               	.LFBB6:
 317               		push __zero_reg__
 318               		push r0
 319               		in r0,__SREG__
 320               		push r0
 321               		clr __zero_reg__
   1:sig-ctc-els-ELS.c **** 
   2:sig-ctc-els-ELS.c **** /*
   3:sig-ctc-els-ELS.c **** 	Electric Lock Switch
   4:sig-ctc-els-ELS.c **** 	alpha version
   5:sig-ctc-els-ELS.c ****     26.11.2016
   6:sig-ctc-els-ELS.c **** 	Copyright Michael Prader
   7:sig-ctc-els-ELS.c **** 		
   8:sig-ctc-els-ELS.c **** 	Fuse bits on ATtiny23123
   9:sig-ctc-els-ELS.c **** 	HIGH	0x
  10:sig-ctc-els-ELS.c **** 	LOW		0x
  11:sig-ctc-els-ELS.c **** */
  12:sig-ctc-els-ELS.c **** 
  13:sig-ctc-els-ELS.c **** 
  14:sig-ctc-els-ELS.c **** //#define F_CPU     4000000
  15:sig-ctc-els-ELS.c **** 
  16:sig-ctc-els-ELS.c **** #include <avr/io.h>
  17:sig-ctc-els-ELS.c **** #include <inttypes.h>
  18:sig-ctc-els-ELS.c **** #include <avr/interrupt.h>
  19:sig-ctc-els-ELS.c **** #include <avr/eeprom.h>
  20:sig-ctc-els-ELS.c **** 
  21:sig-ctc-els-ELS.c **** 
  22:sig-ctc-els-ELS.c **** #include "pins.h"
  23:sig-ctc-els-ELS.c **** 
  24:sig-ctc-els-ELS.c **** 
  25:sig-ctc-els-ELS.c **** #include "keydeb.c"
  26:sig-ctc-els-ELS.c **** 
  27:sig-ctc-els-ELS.c **** 
  28:sig-ctc-els-ELS.c **** #include "sig-defines.c"
  29:sig-ctc-els-ELS.c **** 
  30:sig-ctc-els-ELS.c **** 
  31:sig-ctc-els-ELS.c **** /****************************/
  32:sig-ctc-els-ELS.c **** // TIMINGS
  33:sig-ctc-els-ELS.c **** 
  34:sig-ctc-els-ELS.c **** #define SWITCH_POWER_TIMER  (4*4)       // in quarter seconds
  35:sig-ctc-els-ELS.c **** #define TRACK_RELAIS_POWER_TIMER (1*4)  // in quarter seconds
  36:sig-ctc-els-ELS.c **** #define LOCK_TIMEOUT_TIMER  (5*4)      // in quarter seconds
  37:sig-ctc-els-ELS.c **** 
  38:sig-ctc-els-ELS.c **** //#define ON_OFF_LOCKOUT	10			// in 10msec units
  39:sig-ctc-els-ELS.c **** 
  40:sig-ctc-els-ELS.c **** 
  41:sig-ctc-els-ELS.c **** 
  42:sig-ctc-els-ELS.c **** /****************************/
  43:sig-ctc-els-ELS.c **** 
  44:sig-ctc-els-ELS.c **** #define QUARTER_SECS_IN_10_MSEC 25
  45:sig-ctc-els-ELS.c **** 
  46:sig-ctc-els-ELS.c **** volatile uint8_t State;
  47:sig-ctc-els-ELS.c **** 
  48:sig-ctc-els-ELS.c **** #define QUARTER_SEC 0x01
  49:sig-ctc-els-ELS.c **** #define UNLOCKED    0x02
  50:sig-ctc-els-ELS.c **** #define TIMING_OUT  0x04
  51:sig-ctc-els-ELS.c **** 
  52:sig-ctc-els-ELS.c **** //volatile uint8_t OnOffLockout = ON_OFF_LOCKOUT;
  53:sig-ctc-els-ELS.c **** 
  54:sig-ctc-els-ELS.c **** #define EE_REQUESTED_POSITION_STORE_ADDRESS	0x10
  55:sig-ctc-els-ELS.c **** 
  56:sig-ctc-els-ELS.c **** void init(void);
  57:sig-ctc-els-ELS.c **** 
  58:sig-ctc-els-ELS.c **** 
  59:sig-ctc-els-ELS.c **** 
  60:sig-ctc-els-ELS.c **** ISR (TIMER0_OVF_vect)			// every 10ms
  61:sig-ctc-els-ELS.c **** {
 322               	5
 323               		push r30
 324               		push r31
 325 00de 1F92      		push r29
 326 00e0 0F92      		push r28
 327 00e2 0FB6      		rcall .
 328 00e4 0F92      		in r28,__SP_L__
 329 00e6 1124      		in r29,__SP_H__
 330 00e8 8F93      	/* prologue: Signal */
 331 00ea 9F93      	/* frame size = 2 */
 333 00ee FF93      	.LM29:
 334 00f0 DF93      		ldi r30,lo8(82)
 335 00f2 CF93      		ldi r31,hi8(82)
 336 00f4 00D0      		ldi r24,lo8(-40)
 337 00f6 CDB7      		st Z,r24
 339               	.LM30:
 340               		ldi r30,lo8(48)
  62:sig-ctc-els-ELS.c **** ;
  63:sig-ctc-els-ELS.c ****     // key debounce
  64:sig-ctc-els-ELS.c ****     
  65:sig-ctc-els-ELS.c ****     static uint8_t ticks = 0;
  66:sig-ctc-els-ELS.c **** 
  67:sig-ctc-els-ELS.c ****     TCNT0 = TIMER0_PRELOAD;	// preload for 10ms
  68:sig-ctc-els-ELS.c ****   
 341               	d r24,Z
 342               		mov r24,r24
 343 00fa E2E5      		ldi r25,lo8(0)
 344 00fc F0E0      		andi r24,lo8(2)
 345 00fe 88ED      		andi r25,hi8(2)
 346 0100 8083      		sbiw r24,0
  69:sig-ctc-els-ELS.c ****  compose input register by reading various input PIN registers (PINA and PIND)
  70:sig-ctc-els-ELS.c ****     if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) keyInput |= POS_IN_KEY_DATA_BYTE_MASK; else  keyInput &= 
  71:sig-ctc-els-ELS.c ****     if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) keyInput |= UNLOCK_KEY_DATA_BYTE_MASK; else  keyInput &= 
  72:sig-ctc-els-ELS.c **** 
 347               	.L12
 348               		ldd r24,Y+1
 349 0102 E0E3      		ori r24,lo8(2)
 350 0104 F0E0      		std Y+1,r24
 351 0106 8081      		rjmp .L13
 352 0108 882F      	.L12:
 353 010a 90E0      		ldd r24,Y+1
 354 010c 8270      		andi r24,lo8(-3)
 355 010e 9070      		std Y+1,r24
 356 0110 0097      	.L13:
 358 0114 8981      	.LM31:
 359 0116 8260      		ldi r30,lo8(57)
 360 0118 8983      		ldi r31,hi8(57)
 361 011a 00C0      		ld r24,Z
 362               		mov r24,r24
 363 011c 8981      		ldi r25,lo8(0)
 364 011e 8D7F      		andi r24,lo8(2)
 365 0120 8983      		andi r25,hi8(2)
 366               		sbiw r24,0
  73:sig-ctc-els-ELS.c ****  
 367               	Y+1
 368               		ori r24,lo8(1)
 369 0122 E9E3      		std Y+1,r24
 370 0124 F0E0      		rjmp .L15
 371 0126 8081      	.L14:
 372 0128 882F      		ldd r24,Y+1
 373 012a 90E0      		andi r24,lo8(-2)
 374 012c 8270      		std Y+1,r24
 375 012e 9070      	.L15:
 377 0132 01F0      	.LM32:
 378 0134 8981      		lds r25,key_state
 379 0136 8160      		ldd r24,Y+1
 380 0138 8983      		eor r24,r25
 381 013a 00C0      		std Y+2,r24
 383 013c 8981      	.LM33:
 384 013e 8E7F      		lds r25,ct0.1327
 385 0140 8983      		ldd r24,Y+2
 386               		and r24,r25
  74:sig-ctc-els-ELS.c ****    k = key_state ^ keyInput;		// key changed ?  // "~" omitted for HIGH-active inputs; (LOW active:
  75:sig-ctc-els-ELS.c ****     ct0 = ~( ct0 & k );			// reset or count ct0
  76:sig-ctc-els-ELS.c ****     ct1 = ct0 ^ (ct1 & k);		// reset or count ct1
  77:sig-ctc-els-ELS.c ****     k&= ct0 & ct1;			// count until roll over ?
 387               	27,r24
 389 0142 9091 0000 	.LM34:
 390 0146 8981      		lds r25,ct1.1328
 391 0148 8927      		ldd r24,Y+2
 392 014a 8A83      		and r25,r24
  78:sig-ctc-els-ELS.c **** key_state ^= k;			// then toggle debounced state
 393               	24,ct0.1327
 394               		eor r24,r25
 395 014c 9091 0000 		sts ct1.1328,r24
 397 0152 8923      	.LM35:
 398 0154 8095      		lds r25,ct0.1327
 399 0156 8093 0000 		lds r24,ct1.1328
  79:sig-ctc-els-ELS.c ****    key_press |= key_state & k;		// 0->1: key press detect
 400               	5,r24
 401               		ldd r24,Y+2
 402 015a 9091 0000 		and r24,r25
 403 015e 8A81      		std Y+2,r24
 405 0162 8091 0000 	.LM36:
 406 0166 8927      		lds r25,key_state
 407 0168 8093 0000 		ldd r24,Y+2
  80:sig-ctc-els-ELS.c ****    /*
 408               	,r25
 409               		sts key_state,r24
 411 0170 8091 0000 	.LM37:
 412 0174 9823      		lds r25,key_state
 413 0176 8A81      		ldd r24,Y+2
 414 0178 8923      		and r25,r24
 415 017a 8A83      		lds r24,key_press
  81:sig-ctc-els-ELS.c ****    if( (key_state & REPEAT_MASK) == 0 )	// check repeat function
 416               	r25
 417               		sts key_press,r24
 419 0180 8A81      	.LM38:
 420 0182 8927      		lds r24,ticks.1331
 421 0184 8093 0000 		subi r24,lo8(-(1))
  82:sig-ctc-els-ELS.c ****     rpt = REPEAT_START;		// start delay
 422               	icks.1331,r24
 424 0188 9091 0000 	.LM39:
 425 018c 8A81      		lds r24,ticks.1331
 426 018e 9823      		cpi r24,lo8(25)
 427 0190 8091 0000 		brlo .L17
 429 0196 8093 0000 	.LM40:
  83:sig-ctc-els-ELS.c ****    if( --rpt == 0 ){
  84:sig-ctc-els-ELS.c ****     rpt = REPEAT_NEXT;			// repeat delay
  85:sig-ctc-els-ELS.c ****     key_rpt |= key_state & REPEAT_MASK;
  86:sig-ctc-els-ELS.c ****     */
  87:sig-ctc-els-ELS.c **** 
  88:sig-ctc-els-ELS.c ****     //if (OnOffLockout) --OnOffLockout;
  89:sig-ctc-els-ELS.c ****   
  90:sig-ctc-els-ELS.c ****     ++ticks;
  91:sig-ctc-els-ELS.c **** 	if (ticks >= QUARTER_SECS_IN_10_MSEC)
  92:sig-ctc-els-ELS.c **** 	{
  93:sig-ctc-els-ELS.c **** 	   ticks = 0;
 430               	ks.1331,__zero_reg__
 432 019a 8091 0000 	.LM41:
 433 019e 8F5F      		lds r24,State
 434 01a0 8093 0000 		ori r24,lo8(1)
  94:sig-ctc-els-ELS.c **** = QUARTER_SEC;
 435               	State,r24
 436               	.L17:
 437 01a4 8091 0000 	/* epilogue start */
 439 01aa 00F0      	.LM42:
  95:sig-ctc-els-ELS.c **** }
  96:sig-ctc-els-ELS.c ****   
 440               	__tmp_reg__
 441               		pop __tmp_reg__
 442 01ac 1092 0000 		pop r28
  97:sig-ctc-els-ELS.c **** 
 443               	p r29
 444               		pop r31
 445 01b0 8091 0000 		pop r30
 446 01b4 8160      		pop r25
 447 01b6 8093 0000 		pop r24
 448               		pop r0
 449               		out __SREG__,r0
  98:sig-ctc-els-ELS.c **** int main(void)
  99:sig-ctc-els-ELS.c **** {
 100:sig-ctc-els-ELS.c **** 	uint8_t i;
 450               	
 451               		pop __zero_reg__
 452 01ba 0F90      		reti
 461 01cc 0FBE      	.Lscope6:
 463 01d0 1F90      	.global	main
 465               	main:
 467               	.LM43:
 468               	.LFBB7:
 469               		push r29
 470               		push r28
 471               		rcall .
 472               		rcall .
 473               		rcall .
 474               		in r28,__SP_L__
 475               		in r29,__SP_H__
 476               	/* prologue: function */
 477               	/* frame size = 6 */
 101:sig-ctc-els-ELS.c **** nt8_t SwitchRequestedPosition, SwitchReadPosition;
 102:sig-ctc-els-ELS.c **** 	uint8_t SwitchPowerTimer = 0, TrackRelaisPowerTimer = 0;
 103:sig-ctc-els-ELS.c **** 	uint8_t LockTimeoutTimer = 0;
 478               	B7
 479               	.LM44:
 480               		std Y+3,__zero_reg__
 481 01d4 DF93      		std Y+2,__zero_reg__
 483 01d8 00D0      	.LM45:
 484 01da 00D0      		std Y+1,__zero_reg__
 486 01de CDB7      	.LM46:
 487 01e0 DEB7      		ldi r26,lo8(58)
 488               		ldi r27,hi8(58)
 489               		ldi r30,lo8(58)
 104:sig-ctc-els-ELS.c **** uint8_t KeyMemory = 0;
 105:sig-ctc-els-ELS.c **** 
 106:sig-ctc-els-ELS.c ****     // activate MOSFET at wakeup
 490               	(58)
 491               		ld r24,Z
 492 01e2 1B82      		ori r24,lo8(1)
 493 01e4 1A82      		st X,r24
 107:sig-ctc-els-ELS.c **** LD_DDR |= HOLD_MASK;
 494               	abn	68,0,112,.LM47-.LFBB7
 495               	.LM47:
 496 01e6 1982      		ldi r26,lo8(59)
 108:sig-ctc-els-ELS.c **** HOLD_PORT |= HOLD_MASK;
 109:sig-ctc-els-ELS.c **** 	
 110:sig-ctc-els-ELS.c ****     /**************************/
 111:sig-ctc-els-ELS.c ****     // TODO - put BOD to 4.3 V
 497               	i r27,hi8(59)
 498               		ldi r30,lo8(59)
 499 01e8 AAE3      		ldi r31,hi8(59)
 500 01ea B0E0      		ld r24,Z
 501 01ec EAE3      		ori r24,lo8(1)
 502 01ee F0E0      		st X,r24
 504 01f2 8160      	.LM48:
 505 01f4 8C93      		sts State,__zero_reg__
 112:sig-ctc-els-ELS.c **** // TODO - HW - see what track relais does with this code
 506               	8,0,133,.LM49-.LFBB7
 507               	.LM49:
 508 01f6 ABE3      		rcall init
 510 01fa EBE3      	.LM50:
 511 01fc F0E0      		ldi r26,lo8(50)
 512 01fe 8081      		ldi r27,hi8(50)
 513 0200 8160      		ldi r30,lo8(50)
 514 0202 8C93      		ldi r31,hi8(50)
 113:sig-ctc-els-ELS.c ****    //          it could be useful to either disable the driver, or to
 114:sig-ctc-els-ELS.c ****     //          give the driver a defined default state, where the relais
 115:sig-ctc-els-ELS.c ****     //          is switched off; at startup, the relais never needs to be on
 116:sig-ctc-els-ELS.c ****     //          This is an assumption that might be revised in the future, so
 117:sig-ctc-els-ELS.c ****     //          it's definitely better to disable the driver, and then look
 118:sig-ctc-els-ELS.c ****     //          what  the relais should actually be doing.
 119:sig-ctc-els-ELS.c ****     /**************************/
 120:sig-ctc-els-ELS.c ****         
 121:sig-ctc-els-ELS.c **** 
 122:sig-ctc-els-ELS.c **** 
 123:sig-ctc-els-ELS.c ****     // memorize high keys
 124:sig-ctc-els-ELS.c ****   //  if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= POS_IN_KEY_DATA_BYTE_MASK; else  KeyMemory
 125:sig-ctc-els-ELS.c ****    // if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= UNLOCK_KEY_DATA_BYTE_MASK; else  KeyMemory
 126:sig-ctc-els-ELS.c **** 	
 127:sig-ctc-els-ELS.c **** 	State = 0; // deactivate UNLOCKED, TIMING_OUT
 128:sig-ctc-els-ELS.c **** 	
 129:sig-ctc-els-ELS.c **** 	init();
 130:sig-ctc-els-ELS.c **** 	
 131:sig-ctc-els-ELS.c **** 	
 515               	
 516               		ori r24,lo8(32)
 517 0204 1092 0000 		st X,r24
 132:sig-ctc-els-ELS.c **** osition = TO_NORMAL;
 133:sig-ctc-els-ELS.c **** 	
 518               	stabn	68,0,142,.LM51-.LFBB7
 519               	.LM51:
 520 0208 00D0      		ldi r26,lo8(50)
 134:sig-ctc-els-ELS.c **** / deactivate switch motor
 135:sig-ctc-els-ELS.c **** 	SWITCH_POWER_DISABLE_PORT |= SWITCH_POWER_DISABLE_MASK;
 136:sig-ctc-els-ELS.c **** 
 137:sig-ctc-els-ELS.c ****     // deactivate relais
 138:sig-ctc-els-ELS.c ****     TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 139:sig-ctc-els-ELS.c ****     TRACK_RELAIS_POWER_DISABLE_PORT &= ~TRACK_RELAIS_POWER_DISABLE_MASK;
 521               	i r27,hi8(50)
 522               		ldi r30,lo8(50)
 523 020a A2E3      		ldi r31,hi8(50)
 524 020c B0E0      		ld r24,Z
 525 020e E2E3      		andi r24,lo8(-17)
 526 0210 F0E0      		st X,r24
 528 0214 8062      	.LM52:
 529 0216 8C93      		ldi r26,lo8(50)
 140:sig-ctc-els-ELS.c **** sei();
 141:sig-ctc-els-ELS.c **** 	
 142:sig-ctc-els-ELS.c **** 	
 530               	hi8(50)
 531               		ldi r30,lo8(50)
 532 0218 A2E3      		ldi r31,hi8(50)
 533 021a B0E0      		ld r24,Z
 534 021c E2E3      		andi r24,lo8(-65)
 535 021e F0E0      		st X,r24
 537 0222 8F7E      	.LM53:
 538 0224 8C93      	/* #APP */
 143:sig-ctc-els-ELS.c **** if (!(eeprom_is_ready())) eeprom_busy_wait();
 539               	sig-ctc-els-ELS.c" 1
 540               		sei
 541 0226 A2E3      	 ;  0 "" 2
 543 022a E2E3      	.LM54:
 544 022c F0E0      	/* #NOAPP */
 545 022e 8081      		ldi r30,lo8(60)
 546 0230 8F7B      		ldi r31,hi8(60)
 547 0232 8C93      		ld r24,Z
 144:sig-ctc-els-ELS.c **** SwitchRequestedPosition = eeprom_read_byte((uint8_t *) EE_REQUESTED_POSITION_STORE_ADDRESS);
 145:sig-ctc-els-ELS.c **** 
 548               	r24
 549               		ldi r25,lo8(0)
 550               		andi r24,lo8(2)
 551               		andi r25,hi8(2)
 552 0234 7894      		sbiw r24,0
 553               		breq .L19
 146:sig-ctc-els-ELS.c **** f ((SwitchRequestedPosition != TO_NORMAL) && (SwitchRequestedPosition != TO_REVERSE))  SwitchReques
 147:sig-ctc-els-ELS.c **** 	
 148:sig-ctc-els-ELS.c ****     /**************************/
 149:sig-ctc-els-ELS.c ****     // TODO - could delay some 50-100 ms here?
 554               		ldi r30,lo8(60)
 555               		ldi r31,hi8(60)
 556               		ld r24,Z
 557 0236 ECE3      		mov r24,r24
 558 0238 F0E0      		ldi r25,lo8(0)
 559 023a 8081      		andi r24,lo8(2)
 560 023c 882F      		andi r25,hi8(2)
 561 023e 90E0      		sbiw r24,0
 562 0240 8270      		brne .L20
 563 0242 9070      	.L19:
 565 0246 01F0      	.LM55:
 566               		ldi r24,lo8(16)
 567 0248 ECE3      		ldi r25,hi8(16)
 568 024a F0E0      		rcall __eerd_byte_tn2313
 569 024c 8081      		std Y+5,r24
 571 0250 90E0      	.LM56:
 572 0252 8270      		ldd r24,Y+5
 573 0254 9070      		cpi r24,lo8(1)
 574 0256 0097      		breq .L21
 575 0258 01F4      		ldd r24,Y+5
 576               		cpi r24,lo8(2)
 150:sig-ctc-els-ELS.c **** /**************************/
 577               	(1)
 578               		std Y+5,r24
 579 025a 80E1      	.L21:
 581 025e 00D0      	.LM57:
 582 0260 8D83      		ldi r24,lo8(-1)
 151:sig-ctc-els-ELS.c ****    
 152:sig-ctc-els-ELS.c **** 
 583               	 get_key_press
 584               		std Y+6,r24
 586 0264 8130      	.LM58:
 587 0266 01F0      		ldi r24,lo8(-1)
 588 0268 8D81      		rcall get_key_short
 589 026a 8230      		std Y+6,r24
 591 026e 81E0      	.LM59:
 592 0270 8D83      		ldi r24,lo8(-1)
 593               		rcall get_key_long
 153:sig-ctc-els-ELS.c **** / clear any keys previously pressed
 154:sig-ctc-els-ELS.c **** 	i = get_key_press(0xFF);
 155:sig-ctc-els-ELS.c **** 	i = get_key_short(0xFF);
 156:sig-ctc-els-ELS.c **** 	i = get_key_long(0xFF);
 157:sig-ctc-els-ELS.c **** 	i = get_key_rpt(0xFF);
 158:sig-ctc-els-ELS.c **** 
 159:sig-ctc-els-ELS.c **** 	while(1)
 160:sig-ctc-els-ELS.c ****     {
 594               	4
 596 0272 8FEF      	.LM60:
 597 0274 00D0      		ldi r24,lo8(-1)
 598 0276 8E83      		rcall get_key_rpt
 161:sig-ctc-els-ELS.c **** // MAIN LOOP
 599               	Y+6,r24
 600               	.L55:
 602 027a 00D0      	.LM61:
 603 027c 8E83      		ldi r30,lo8(48)
 162:sig-ctc-els-ELS.c ****        
 604               	r31,hi8(48)
 605               		ld r24,Z
 606 027e 8FEF      		mov r24,r24
 607 0280 00D0      		ldi r25,lo8(0)
 608 0282 8E83      		andi r24,lo8(4)
 163:sig-ctc-els-ELS.c ****        // read status of turnout; because of the capacitors, initial position will
 609               	 r25,hi8(4)
 610               		sbiw r24,0
 611 0284 8FEF      		breq .L22
 612 0286 00D0      		ldd r24,Y+4
 613 0288 8E83      		ori r24,lo8(1)
 614               		std Y+4,r24
 164:sig-ctc-els-ELS.c **** 	// be wrong until the capacitors have fully loaded
 165:sig-ctc-els-ELS.c ****     	if (SWITCH_N_PIN & SWITCH_N_MASK) SwitchReadPosition |= TO_NORMAL; else SwitchReadPosition &= 
 166:sig-ctc-els-ELS.c ****     	if (SWITCH_R_PIN & SWITCH_R_MASK) SwitchReadPosition |= TO_REVERSE; else SwitchReadPosition &=
 167:sig-ctc-els-ELS.c **** 		
 168:sig-ctc-els-ELS.c **** 		SwitchReadPosition &= TO_NORMAL | TO_REVERSE;
 169:sig-ctc-els-ELS.c **** 		
 170:sig-ctc-els-ELS.c **** 		
 171:sig-ctc-els-ELS.c ****         // read the MODE configuration switch
 615               	.L23
 616               	.L22:
 617 028a E0E3      		ldd r24,Y+4
 618 028c F0E0      		andi r24,lo8(-2)
 619 028e 8081      		std Y+4,r24
 620 0290 882F      	.L23:
 622 0294 8470      	.LM62:
 623 0296 9070      		ldi r30,lo8(54)
 624 0298 0097      		ldi r31,hi8(54)
 625 029a 01F0      		ld r24,Z
 626 029c 8C81      		mov r24,r24
 627 029e 8160      		ldi r25,lo8(0)
 628 02a0 8C83      		andi r24,lo8(16)
 629 02a2 00C0      		andi r25,hi8(16)
 630               		sbiw r24,0
 631 02a4 8C81      		breq .L24
 632 02a6 8E7F      		ldd r24,Y+4
 633 02a8 8C83      		ori r24,lo8(2)
 634               		std Y+4,r24
 172:sig-ctc-els-ELS.c **** (MODE_PIN & MODE_MASK)
 635               	d r24,Y+4
 636               		andi r24,lo8(-3)
 637 02aa E6E3      		std Y+4,r24
 638 02ac F0E0      	.L25:
 640 02b0 882F      	.LM63:
 641 02b2 90E0      		ldd r24,Y+4
 642 02b4 8071      		andi r24,lo8(3)
 643 02b6 9070      		std Y+4,r24
 645 02ba 01F0      	.LM64:
 646 02bc 8C81      		ldi r30,lo8(54)
 647 02be 8260      		ldi r31,hi8(54)
 648 02c0 8C83      		ld r24,Z
 649 02c2 00C0      		mov r24,r24
 650               		ldi r25,lo8(0)
 651 02c4 8C81      		andi r24,lo8(4)
 652 02c6 8D7F      		andi r25,hi8(4)
 653 02c8 8C83      		sbiw r24,0
 654               		brne .+2
 173:sig-ctc-els-ELS.c ****    	{
 174:sig-ctc-els-ELS.c ****     	    // SW1 is high (off)
 655               	8,0,182,.LM65-.LFBB7
 656               	.LM65:
 657 02ca 8C81      		lds r24,State
 658 02cc 8370      		mov r24,r24
 659 02ce 8C83      		ldi r25,lo8(0)
 175:sig-ctc-els-ELS.c ****   	    // in this mode, the lock is simulated
 176:sig-ctc-els-ELS.c ****     	    if (!(State & (UNLOCKED | TIMING_OUT)))
 177:sig-ctc-els-ELS.c ****     	    {
 178:sig-ctc-els-ELS.c ****     	        // the lock is still set (neither unlocked nor timing out)
 660               	 r24,lo8(6)
 661               		andi r25,hi8(6)
 662 02d0 E6E3      		sbiw r24,0
 663 02d2 F0E0      		brne .L27
 665 02d6 882F      	.LM66:
 666 02d8 90E0      		ldi r24,lo8(1)
 667 02da 8470      		rcall get_key_press
 668 02dc 9070      		tst r24
 669 02de 0097      		breq .L29
 671 02e2 00C0      	.LM67:
 179:sig-ctc-els-ELS.c **** 	        // we need to check why we woke up
 180:sig-ctc-els-ELS.c ****     	        if (get_key_press( UNLOCK_KEY_DATA_BYTE_MASK)) // ||(KeyMemory & UNLOCK_KEY_DATA_BYTE_
 181:sig-ctc-els-ELS.c ****     	        {
 182:sig-ctc-els-ELS.c ****     	            // lock is set and unlock key was pressed
 672               	(50)
 673               		ldi r27,hi8(50)
 674 02e4 8091 0000 		ldi r30,lo8(50)
 675 02e8 882F      		ldi r31,hi8(50)
 676 02ea 90E0      		ld r24,Z
 677 02ec 8670      		ori r24,lo8(16)
 678 02ee 9070      		st X,r24
 680 02f2 01F4      	.LM68:
 183:sig-ctc-els-ELS.c **** 	            //  clear stored key at startup
 184:sig-ctc-els-ELS.c ****     	            //KeyMemory &= ~UNLOCK_KEY_DATA_BYTE_MASK;
 185:sig-ctc-els-ELS.c ****     	            
 186:sig-ctc-els-ELS.c ****     	            // activate track relais
 681               	lo8(4)
 682               		std Y+2,r24
 684 02f6 00D0      	.LM69:
 685 02f8 8823      		ldi r24,lo8(20)
 686 02fa 01F0      		std Y+1,r24
 187:sig-ctc-els-ELS.c **** 	            TRACK_RELAIS_PORT |= TRACK_RELAIS_MASK;
 188:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 189:sig-ctc-els-ELS.c ****                     
 190:sig-ctc-els-ELS.c ****                     // start timeout
 191:sig-ctc-els-ELS.c ****     	            LockTimeoutTimer = LOCK_TIMEOUT_TIMER;
 192:sig-ctc-els-ELS.c ****     	            State |= TIMING_OUT;
 193:sig-ctc-els-ELS.c ****     	        }
 687               	n	68,0,198,.LM70-.LFBB7
 688               	.LM70:
 689 02fc A2E3      		lds r24,State
 690 02fe B0E0      		ori r24,lo8(4)
 691 0300 E2E3      		sts State,r24
 692 0302 F0E0      		rjmp .L29
 693 0304 8081      	.L27:
 695 0308 8C93      	.LM71:
 194:sig-ctc-els-ELS.c ****   } else if (State & UNLOCKED) {
 696               	State
 697               		mov r24,r24
 698 030a 84E0      		ldi r25,lo8(0)
 699 030c 8A83      		andi r24,lo8(2)
 195:sig-ctc-els-ELS.c ****    	        
 196:sig-ctc-els-ELS.c ****     	        if (get_key_press( UNLOCK_KEY_DATA_BYTE_MASK) && (SwitchReadPosition  == TO_NORMAL))
 197:sig-ctc-els-ELS.c ****     	        {
 700               	i r25,hi8(2)
 701               		sbiw r24,0
 702 030e 84E1      		breq .L29
 198:sig-ctc-els-ELS.c ****  	            // switch is normal, lock is unlocked, button is pressed => relock
 704               	2:
 705               		ldi r24,lo8(1)
 706 0312 8091 0000 		rcall get_key_press
 707 0316 8460      		tst r24
 708 0318 8093 0000 		breq .L30
 709 031c 00C0      		ldd r24,Y+4
 710               		cpi r24,lo8(1)
 199:sig-ctc-els-ELS.c ****    	            State &= ~UNLOCKED;
 200:sig-ctc-els-ELS.c ****     	            
 711               	L30
 713 031e 8091 0000 	.LM73:
 714 0322 882F      		lds r24,State
 715 0324 90E0      		andi r24,lo8(-3)
 716 0326 8270      		sts State,r24
 718 032a 0097      	.LM74:
 719 032c 01F0      		ldi r26,lo8(50)
 201:sig-ctc-els-ELS.c ****   	            // release the track relais and give it some time to move
 202:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 720               	hi8(50)
 721               		ldi r30,lo8(50)
 722 032e 81E0      		ldi r31,hi8(50)
 723 0330 00D0      		ld r24,Z
 724 0332 8823      		andi r24,lo8(-17)
 725 0334 01F0      		st X,r24
 727 0338 8130      	.LM75:
 728 033a 01F4      		ldi r24,lo8(4)
 203:sig-ctc-els-ELS.c ****   	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 204:sig-ctc-els-ELS.c ****     	        }
 205:sig-ctc-els-ELS.c ****     	        
 729               	r24
 730               	.L30:
 732 0340 8D7F      	.LM76:
 733 0342 8093 0000 		ldi r24,lo8(2)
 206:sig-ctc-els-ELS.c **** IS_PORT &= ~TRACK_RELAIS_MASK;
 207:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 208:sig-ctc-els-ELS.c ****     	        }
 734               	l get_key_press
 735               		tst r24
 736 0346 A2E3      		breq .L29
 738 034a E2E3      	.LM77:
 739 034c F0E0      		ldd r24,Y+5
 740 034e 8081      		cpi r24,lo8(1)
 741 0350 8F7E      		brne .L31
 742 0352 8C93      		ldi r24,lo8(2)
 209:sig-ctc-els-ELS.c ****      TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 743               	r24
 744               		rjmp .L29
 745 0354 84E0      	.L31:
 746 0356 8A83      		ldd r24,Y+5
 747               		cpi r24,lo8(2)
 210:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 211:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 212:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 748               	 .L29
 749               		ldi r24,lo8(1)
 750 0358 82E0      		std Y+5,r24
 751 035a 00D0      	.L29:
 753 035e 01F0      	.LM78:
 213:sig-ctc-els-ELS.c ****  	        }
 214:sig-ctc-els-ELS.c ****     	        
 215:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 754               	24,State
 755               		mov r24,r24
 756 0360 8D81      		ldi r25,lo8(0)
 757 0362 8130      		andi r24,lo8(4)
 758 0364 01F4      		andi r25,hi8(4)
 759 0366 82E0      		sbiw r24,0
 760 0368 8D83      		breq .L33
 761 036a 00C0      		ldd r24,Y+1
 762               		tst r24
 763 036c 8D81      		brne .L33
 765 0370 01F4      	.LM79:
 766 0372 81E0      		ldi r24,lo8(2)
 767 0374 8D83      		rcall get_key_press
 768               		std Y+6,r24
 216:sig-ctc-els-ELS.c **** erTimer = TRACK_RELAIS_POWER_TIMER;
 217:sig-ctc-els-ELS.c ****     	        }
 218:sig-ctc-els-ELS.c ****     	        
 219:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 220:sig-ctc-els-ELS.c ****     	        {
 769               	5,.LM80-.LFBB7
 770               	.LM80:
 771 0376 8091 0000 		ldi r24,lo8(1)
 772 037a 882F      		rcall get_key_press
 773 037c 90E0      		std Y+6,r24
 775 0380 9070      	.LM81:
 776 0382 0097      		lds r24,State
 777 0384 01F0      		andi r24,lo8(-5)
 778 0386 8981      		sts State,r24
 780 038a 01F4      	.LM82:
 221:sig-ctc-els-ELS.c **** RELAIS_POWER_TIMER;
 222:sig-ctc-els-ELS.c ****     	        }
 223:sig-ctc-els-ELS.c ****     	        
 224:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 781               	te
 782               		ori r24,lo8(2)
 783 038c 82E0      		sts State,r24
 784 038e 00D0      		rjmp .L33
 785 0390 8E83      	.L26:
 225:sig-ctc-els-ELS.c **** erTimer = TRACK_RELAIS_POWER_TIMER;
 786               	bn	68,0,234,.LM83-.LFBB7
 787               	.LM83:
 788 0392 81E0      		ldi r24,lo8(1)
 789 0394 00D0      		rcall get_key_press
 790 0396 8E83      		tst r24
 226:sig-ctc-els-ELS.c **** ove
 791               	 .L34
 793 0398 8091 0000 	.LM84:
 794 039c 8B7F      	/* #APP */
 795 039e 8093 0000 	 ;  236 "sig-ctc-els-ELS.c" 1
 227:sig-ctc-els-ELS.c **** 
 796               	 ;  0 "" 2
 797               	/* #NOAPP */
 798 03a2 8091 0000 	.L34:
 800 03a8 8093 0000 	.LM85:
 801 03ac 00C0      		ldi r24,lo8(2)
 802               		rcall get_key_press
 228:sig-ctc-els-ELS.c ****     	            State &= ~UNLOCKED;
 229:sig-ctc-els-ELS.c ****     	            
 230:sig-ctc-els-ELS.c ****     	            // release the track relais and give it some time to move
 231:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 232:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 233:sig-ctc-els-ELS.c ****     	        }
 234:sig-ctc-els-ELS.c ****     	        
 803               	4
 804               		breq .L33
 806 03b0 00D0      	.LM86:
 807 03b2 8823      		ldd r24,Y+5
 808 03b4 01F0      		cpi r24,lo8(1)
 235:sig-ctc-els-ELS.c ****       if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 236:sig-ctc-els-ELS.c ****     	        {
 809               	.L35
 810               		ldi r24,lo8(2)
 811               		std Y+5,r24
 812               		rjmp .L33
 813 03b6 0000      	.L35:
 814               		ldd r24,Y+5
 815               		cpi r24,lo8(2)
 816               		brne .L33
 237:sig-ctc-els-ELS.c **** RELAIS_POWER_TIMER;
 238:sig-ctc-els-ELS.c ****     	        }
 239:sig-ctc-els-ELS.c ****     	        
 817               	,lo8(1)
 818               		std Y+5,r24
 819 03b8 82E0      	.L33:
 821 03bc 8823      	.LM87:
 822 03be 01F0      		ldd r24,Y+5
 240:sig-ctc-els-ELS.c **** IS_PORT &= ~TRACK_RELAIS_MASK;
 241:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 242:sig-ctc-els-ELS.c ****     	        }
 823               	24,lo8(1)
 824               		brne .L36
 825 03c0 8D81      		ldi r26,lo8(50)
 826 03c2 8130      		ldi r27,hi8(50)
 827 03c4 01F4      		ldi r30,lo8(50)
 828 03c6 82E0      		ldi r31,hi8(50)
 829 03c8 8D83      		ld r24,Z
 830 03ca 00C0      		ori r24,lo8(8)
 831               		st X,r24
 832 03cc 8D81      		rjmp .L37
 833 03ce 8230      	.L36:
 834 03d0 01F4      		ldi r26,lo8(50)
 835 03d2 81E0      		ldi r27,hi8(50)
 836 03d4 8D83      		ldi r30,lo8(50)
 837               		ldi r31,hi8(50)
 243:sig-ctc-els-ELS.c ****      TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 244:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 245:sig-ctc-els-ELS.c ****     	        }
 246:sig-ctc-els-ELS.c ****     	        
 247:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 248:sig-ctc-els-ELS.c ****     	        {
 838               	 r24,lo8(-9)
 839               		st X,r24
 840 03d6 8D81      	.L37:
 842 03da 01F4      	.LM88:
 843 03dc A2E3      		ldd r25,Y+5
 844 03de B0E0      		ldd r24,Y+4
 845 03e0 E2E3      		cp r25,r24
 846 03e2 F0E0      		breq .L38
 848 03e6 8860      	.LM89:
 849 03e8 8C93      		ldi r24,lo8(16)
 850 03ea 00C0      		std Y+3,r24
 851               	.L38:
 853 03ee B0E0      	.LM90:
 854 03f0 E2E3      		ldd r24,Y+3
 855 03f2 F0E0      		tst r24
 856 03f4 8081      		breq .L39
 857 03f6 877F      		ldi r26,lo8(50)
 858 03f8 8C93      		ldi r27,hi8(50)
 859               		ldi r30,lo8(50)
 249:sig-ctc-els-ELS.c **** RELAIS_POWER_TIMER;
 250:sig-ctc-els-ELS.c ****     	        }
 251:sig-ctc-els-ELS.c ****     	        
 252:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 860               	24,Z
 861               		andi r24,lo8(-33)
 862 03fa 9D81      		st X,r24
 863 03fc 8C81      		rjmp .L40
 864 03fe 9817      	.L39:
 865 0400 01F0      		ldi r26,lo8(50)
 253:sig-ctc-els-ELS.c **** erTimer = TRACK_RELAIS_POWER_TIMER;
 254:sig-ctc-els-ELS.c ****     	        }
 255:sig-ctc-els-ELS.c ****     	        
 866               	27,hi8(50)
 867               		ldi r30,lo8(50)
 868 0402 80E1      		ldi r31,hi8(50)
 869 0404 8B83      		ld r24,Z
 870               		ori r24,lo8(32)
 256:sig-ctc-els-ELS.c **** IS_PORT &= ~TRACK_RELAIS_MASK;
 257:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 258:sig-ctc-els-ELS.c ****     	        }
 871               	,r24
 872               	.L40:
 874 0408 8823      	.LM91:
 875 040a 01F0      		ldd r24,Y+2
 876 040c A2E3      		tst r24
 877 040e B0E0      		breq .L41
 878 0410 E2E3      		ldi r26,lo8(50)
 879 0412 F0E0      		ldi r27,hi8(50)
 880 0414 8081      		ldi r30,lo8(50)
 881 0416 8F7D      		ldi r31,hi8(50)
 882 0418 8C93      		ld r24,Z
 883 041a 00C0      		andi r24,lo8(-65)
 884               		st X,r24
 885 041c A2E3      		rjmp .L42
 886 041e B0E0      	.L41:
 887 0420 E2E3      		ldi r26,lo8(50)
 888 0422 F0E0      		ldi r27,hi8(50)
 889 0424 8081      		ldi r30,lo8(50)
 890 0426 8062      		ldi r31,hi8(50)
 891 0428 8C93      		ld r24,Z
 892               		ori r24,lo8(64)
 259:sig-ctc-els-ELS.c ****      TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 893               	n	68,0,262,.LM92-.LFBB7
 894               	.LM92:
 895 042a 8A81      		lds r24,State
 896 042c 8823      		mov r24,r24
 897 042e 01F0      		ldi r25,lo8(0)
 898 0430 A2E3      		andi r24,lo8(1)
 899 0432 B0E0      		andi r25,hi8(1)
 900 0434 E2E3      		tst r24
 901 0436 F0E0      		brne .+2
 902 0438 8081      		rjmp .L43
 904 043c 8C93      	.LM93:
 905 043e 00C0      		ldd r24,Y+3
 906               		tst r24
 907 0440 A2E3      		breq .L44
 908 0442 B0E0      		ldd r24,Y+3
 909 0444 E2E3      		subi r24,lo8(-(-1))
 910 0446 F0E0      		std Y+3,r24
 911 0448 8081      	.L44:
 913 044c 8C93      	.LM94:
 914               		ldd r24,Y+2
 260:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 261:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 262:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 915               	dd r24,Y+2
 916               		subi r24,lo8(-(-1))
 917 044e 8091 0000 		std Y+2,r24
 918 0452 882F      	.L45:
 920 0456 8170      	.LM95:
 921 0458 9070      		ldd r24,Y+1
 922 045a 8823      		tst r24
 923 045c 01F4      		breq .L46
 924 045e 00C0      		ldd r24,Y+1
 263:sig-ctc-els-ELS.c ****  	        }
 264:sig-ctc-els-ELS.c ****     	        
 925               	lo8(-(-1))
 926               		std Y+1,r24
 927 0460 8B81      	.L46:
 929 0464 01F0      	.LM96:
 930 0466 8B81      		lds r24,State
 931 0468 8150      		mov r24,r24
 932 046a 8B83      		ldi r25,lo8(0)
 933               		andi r24,lo8(2)
 265:sig-ctc-els-ELS.c **** IS_PORT &= ~TRACK_RELAIS_MASK;
 934               	,hi8(2)
 935               		sbiw r24,0
 936 046c 8A81      		breq .L47
 938 0470 01F0      	.LM97:
 939 0472 8A81      		ldi r26,lo8(56)
 940 0474 8150      		ldi r27,hi8(56)
 941 0476 8A83      		ldi r30,lo8(56)
 942               		ldi r31,hi8(56)
 266:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 943               	
 944               		andi r24,lo8(-2)
 945 0478 8981      		st X,r24
 947 047c 01F0      	.LM98:
 948 047e 8981      		ldi r26,lo8(56)
 949 0480 8150      		ldi r27,hi8(56)
 950 0482 8983      		ldi r30,lo8(56)
 951               		ldi r31,hi8(56)
 267:sig-ctc-els-ELS.c ****    	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 268:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 952               	Z
 953               		andi r24,lo8(-3)
 954 0484 8091 0000 		st X,r24
 955 0488 882F      		rjmp .L48
 956 048a 90E0      	.L47:
 958 048e 9070      	.LM99:
 959 0490 0097      		lds r24,State
 960 0492 01F0      		mov r24,r24
 269:sig-ctc-els-ELS.c **** ove
 270:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 961               	lo8(0)
 962               		andi r24,lo8(4)
 963 0494 A8E3      		andi r25,hi8(4)
 964 0496 B0E0      		sbiw r24,0
 965 0498 E8E3      		breq .L49
 967 049c 8081      	.LM100:
 968 049e 8E7F      		ldi r26,lo8(56)
 969 04a0 8C93      		ldi r27,hi8(56)
 271:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 970               	lo8(56)
 971               		ldi r31,hi8(56)
 972 04a2 A8E3      		ld r25,Z
 973 04a4 B0E0      		ldi r24,lo8(1)
 974 04a6 E8E3      		eor r24,r25
 975 04a8 F0E0      		st X,r24
 977 04ac 8D7F      	.LM101:
 978 04ae 8C93      		ldi r26,lo8(56)
 979 04b0 00C0      		ldi r27,hi8(56)
 980               		ldi r30,lo8(56)
 272:sig-ctc-els-ELS.c ****    	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 981               	8(56)
 982               		ld r25,Z
 983 04b2 8091 0000 		ldi r24,lo8(2)
 984 04b6 882F      		eor r24,r25
 985 04b8 90E0      		st X,r24
 986 04ba 8470      		rjmp .L48
 987 04bc 9070      	.L49:
 989 04c0 01F0      	.LM102:
 273:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 990               	lo8(56)
 991               		ldi r27,hi8(56)
 992 04c2 A8E3      		ldi r30,lo8(56)
 993 04c4 B0E0      		ldi r31,hi8(56)
 994 04c6 E8E3      		ld r24,Z
 995 04c8 F0E0      		ori r24,lo8(1)
 996 04ca 9081      		st X,r24
 998 04ce 8927      	.LM103:
 999 04d0 8C93      		ldi r26,lo8(56)
 274:sig-ctc-els-ELS.c ****    	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 1000               	i8(56)
 1001               		ldi r30,lo8(56)
 1002 04d2 A8E3      		ldi r31,hi8(56)
 1003 04d4 B0E0      		ld r24,Z
 1004 04d6 E8E3      		ori r24,lo8(2)
 1005 04d8 F0E0      		st X,r24
 1006 04da 9081      	.L48:
 1008 04de 8927      	.LM104:
 1009 04e0 8C93      		lds r24,State
 1010 04e2 00C0      		andi r24,lo8(-2)
 1011               		sts State,r24
 275:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 276:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 1012               	n	68,0,283,.LM105-.LFBB7
 1013               	.LM105:
 1014 04e4 A8E3      		ldd r24,Y+3
 1015 04e6 B0E0      		tst r24
 1016 04e8 E8E3      		breq .+2
 1017 04ea F0E0      		rjmp .L55
 1018 04ec 8081      		ldd r24,Y+2
 1019 04ee 8160      		tst r24
 1020 04f0 8C93      		breq .+2
 277:sig-ctc-els-ELS.c ****   	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 1021               	5
 1022               		lds r24,State
 1023 04f2 A8E3      		mov r24,r24
 1024 04f4 B0E0      		ldi r25,lo8(0)
 1025 04f6 E8E3      		andi r24,lo8(6)
 1026 04f8 F0E0      		andi r25,hi8(6)
 1027 04fa 8081      		sbiw r24,0
 1028 04fc 8260      		breq .+2
 1029 04fe 8C93      		rjmp .L55
 278:sig-ctc-els-ELS.c **** ove
 279:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 1031               	di r30,lo8(60)
 1032               		ldi r31,hi8(60)
 1033 0500 8091 0000 		ld r24,Z
 1034 0504 8E7F      		mov r24,r24
 1035 0506 8093 0000 		ldi r25,lo8(0)
 1036               		andi r24,lo8(2)
 280:sig-ctc-els-ELS.c ****  	            // release the track relais and give it some time to move
 281:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 282:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 283:sig-ctc-els-ELS.c ****     	        }
 1037               	r25,hi8(2)
 1038               		sbiw r24,0
 1039 050a 8B81      		breq .L51
 1040 050c 8823      	.L52:
 1041 050e 01F0      		ldi r30,lo8(60)
 1042 0510 00C0      		ldi r31,hi8(60)
 1043 0512 8A81      		ld r24,Z
 1044 0514 8823      		mov r24,r24
 1045 0516 01F0      		ldi r25,lo8(0)
 1046 0518 00C0      		andi r24,lo8(2)
 1047 051a 8091 0000 		andi r25,hi8(2)
 1048 051e 882F      		sbiw r24,0
 1049 0520 90E0      		brne .L52
 1050 0522 8670      	.L51:
 1052 0526 0097      	.LM107:
 1053 0528 01F0      		ldi r24,lo8(16)
 1054 052a 00C0      		ldi r25,hi8(16)
 284:sig-ctc-els-ELS.c **** 	        
 285:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 286:sig-ctc-els-ELS.c ****     	        {
 1055               	l __eewr_byte_tn2313
 1057 052c ECE3      	.LM108:
 1058 052e F0E0      		ldi r30,lo8(60)
 1059 0530 8081      		ldi r31,hi8(60)
 1060 0532 882F      		ld r24,Z
 1061 0534 90E0      		mov r24,r24
 1062 0536 8270      		ldi r25,lo8(0)
 1063 0538 9070      		andi r24,lo8(2)
 1064 053a 0097      		andi r25,hi8(2)
 1065 053c 01F0      		sbiw r24,0
 1066               		breq .L53
 1067 053e ECE3      	.L54:
 1068 0540 F0E0      		ldi r30,lo8(60)
 1069 0542 8081      		ldi r31,hi8(60)
 1070 0544 882F      		ld r24,Z
 1071 0546 90E0      		mov r24,r24
 1072 0548 8270      		ldi r25,lo8(0)
 1073 054a 9070      		andi r24,lo8(2)
 1074 054c 0097      		andi r25,hi8(2)
 1075 054e 01F4      		sbiw r24,0
 1076               		brne .L54
 287:sig-ctc-els-ELS.c **** RELAIS_POWER_TIMER;
 1077               		ldi r25,lo8(0)
 1078               		andi r24,lo8(2)
 1079 0550 80E1      		andi r25,hi8(2)
 1080 0552 90E0      		sbiw r24,0
 1081 0554 6D81      		breq .L53
 1082 0556 00D0      	.L54:
 288:sig-ctc-els-ELS.c **** ove
 1083               	16)
 1084               		ldd r22,Y+5
 1085 0558 ECE3      		rcall __eewr_byte_tn2313
 1087 055c 8081      	.LM108:
 1088 055e 882F      		ldi r30,lo8(60)
 1089 0560 90E0      		ldi r31,hi8(60)
 1090 0562 8270      		ld r24,Z
 1091 0564 9070      		mov r24,r24
 1092 0566 0097      		ldi r25,lo8(0)
 1093 0568 01F0      		andi r24,lo8(2)
 1094               		andi r25,hi8(2)
 1095 056a ECE3      		sbiw r24,0
 1096 056c F0E0      		breq .L53
 1097 056e 8081      	.L54:
 1098 0570 882F      		ldi r30,lo8(60)
 1099 0572 90E0      		ldi r31,hi8(60)
 1100 0574 8270      		ld r24,Z
 1101 0576 9070      		mov r24,r24
 1102 0578 0097      		ldi r25,lo8(0)
 1103 057a 01F4      		andi r24,lo8(2)
 1104               		andi r25,hi8(2)
 289:sig-ctc-els-ELS.c **** 
 1105               	)
 1106               		ld r24,Z
 1107 057c ABE3      		mov r24,r24
 1108 057e B0E0      		ldi r25,lo8(0)
 1109 0580 EBE3      		andi r24,lo8(2)
 1110 0582 F0E0      		andi r25,hi8(2)
 1111 0584 8081      		sbiw r24,0
 1112 0586 8E7F      		breq .L53
 1113 0588 8C93      	.L54:
 1114 058a 00C0      		ldi r30,lo8(60)
 1115               		ldi r31,hi8(60)
 1116               		ld r24,Z
 1117               		mov r24,r24
 1118               		ldi r25,lo8(0)
 1119               		andi r24,lo8(2)
 1120               		andi r25,hi8(2)
 1121               		sbiw r24,0
 1122               		brne .L54
 1123               	.L53:
 1125               	.LM109:
 1126               		ldi r26,lo8(59)
 1127               		ldi r27,hi8(59)
 1128               		ldi r30,lo8(59)
 290:sig-ctc-els-ELS.c ****     	            State &= ~UNLOCKED;
 291:sig-ctc-els-ELS.c ****     	            
 292:sig-ctc-els-ELS.c ****     	            // release the track relais and give it some time to move
 293:sig-ctc-els-ELS.c ****     	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 294:sig-ctc-els-ELS.c ****     	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 295:sig-ctc-els-ELS.c ****     	        }
 296:sig-ctc-els-ELS.c ****     	        
 297:sig-ctc-els-ELS.c ****     	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 1129               	31,hi8(60)
 1130               		ld r24,Z
 1131               		mov r24,r24
 1132 058c DF93      		ldi r25,lo8(0)
 1133 058e CF93      		andi r24,lo8(2)
 1134 0590 CDB7      		andi r25,hi8(2)
 1135 0592 DEB7      		sbiw r24,0
 1136               		brne .L54
 1137               	.L53:
 298:sig-ctc-els-ELS.c ****      {
 299:sig-ctc-els-ELS.c ****     	            // switch is unlocked, throw it
 1138               	5,lo8(0)
 1139               		andi r24,lo8(2)
 1140 0594 E8E2      		andi r25,hi8(2)
 1141 0596 F0E0      		sbiw r24,0
 1142 0598 80E8      		breq .L53
 1143 059a 8083      	.L54:
 300:sig-ctc-els-ELS.c ****    	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 301:sig-ctc-els-ELS.c ****     	        {
 302:sig-ctc-els-ELS.c ****     	            // switch is unlocked, throw it
 303:sig-ctc-els-ELS.c ****     	            if (SwitchRequestedPosition == TO_NORMAL) SwitchRequestedPosition = TO_REVERSE; el
 304:sig-ctc-els-ELS.c ****     	        }
 1144               	16)
 1145               		ldd r22,Y+5
 1146 059c A2E3      		rcall __eewr_byte_tn2313
 1148 05a0 E2E3      	.LM108:
 1149 05a2 F0E0      		ldi r30,lo8(60)
 1150 05a4 8081      		ldi r31,hi8(60)
 1151 05a6 8E7F      		ld r24,Z
 1152 05a8 8C93      		mov r24,r24
 305:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1153               	brne .L52
 1154               	.L51:
 1156 05ac B0E0      	.LM107:
 1157 05ae E1E3      		ldi r24,lo8(16)
 1158 05b0 F0E0      		ldi r25,hi8(16)
 1159 05b2 8081      		ldd r22,Y+5
 1160 05b4 8E7F      		rcall __eewr_byte_tn2313
 306:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 307:sig-ctc-els-ELS.c ****     	        }
 1162               	ldi r30,lo8(60)
 1163               		ldi r31,hi8(60)
 1164 05b8 A8E3      		ld r24,Z
 1165 05ba B0E0      		mov r24,r24
 1166 05bc E8E3      		ldi r25,lo8(0)
 1167 05be F0E0      		andi r24,lo8(2)
 1168 05c0 8081      		andi r25,hi8(2)
 1169 05c2 8B7F      		sbiw r24,0
 1170 05c4 8C93      		breq .L53
 308:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1171               	25,hi8(16)
 1172               		ldd r22,Y+5
 1173 05c6 A7E3      		rcall __eewr_byte_tn2313
 1175 05ca E7E3      	.LM108:
 1176 05cc F0E0      		ldi r30,lo8(60)
 1177 05ce 8081      		ldi r31,hi8(60)
 1178 05d0 8B7F      		ld r24,Z
 1179 05d2 8C93      		mov r24,r24
 309:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 310:sig-ctc-els-ELS.c ****     	        }
 1180               	brne .L52
 1181               	.L51:
 1183 05d6 B0E0      	.LM107:
 1184 05d8 E2E3      		ldi r24,lo8(16)
 1185 05da F0E0      		ldi r25,hi8(16)
 1186 05dc 8081      		ldd r22,Y+5
 1187 05de 8B7F      		rcall __eewr_byte_tn2313
 311:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1189               	ldi r30,lo8(60)
 1190               		ldi r31,hi8(60)
 1191 05e2 A1E3      		ld r24,Z
 1192 05e4 B0E0      		mov r24,r24
 1193 05e6 E1E3      		ldi r25,lo8(0)
 1194 05e8 F0E0      		andi r24,lo8(2)
 1195 05ea 8081      		andi r25,hi8(2)
 1196 05ec 8B7F      		sbiw r24,0
 1197 05ee 8C93      		breq .L53
 312:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 313:sig-ctc-els-ELS.c ****     	        }
 1198               	25,hi8(16)
 1199               		ldd r22,Y+5
 1200 05f0 A8E3      		rcall __eewr_byte_tn2313
 1202 05f4 E8E3      	.LM108:
 1203 05f6 F0E0      		ldi r30,lo8(60)
 1204 05f8 8081      		ldi r31,hi8(60)
 1205 05fa 8F7E      		ld r24,Z
 1206 05fc 8C93      		mov r24,r24
 314:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1207               	brne .L52
 1208               	.L51:
 1210 0600 B0E0      	.LM107:
 1211 0602 E7E3      		ldi r24,lo8(16)
 1212 0604 F0E0      		ldi r25,hi8(16)
 1213 0606 8081      		ldd r22,Y+5
 1214 0608 8F7E      		rcall __eewr_byte_tn2313
 315:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 316:sig-ctc-els-ELS.c ****     	        }
 317:sig-ctc-els-ELS.c ****     	    }
 1216               	ldi r30,lo8(60)
 1217               		ldi r31,hi8(60)
 1218 060c A1E3      		ld r24,Z
 1219 060e B0E0      		mov r24,r24
 1220 0610 E1E3      		ldi r25,lo8(0)
 1221 0612 F0E0      		andi r24,lo8(2)
 1222 0614 8081      		andi r25,hi8(2)
 1223 0616 8860      		sbiw r24,0
 1224 0618 8C93      		breq .L53
 318:sig-ctc-els-ELS.c **** _REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_NORMAL;
 1225               	25,hi8(16)
 1226               		ldd r22,Y+5
 1227 061a A1E3      		rcall __eewr_byte_tn2313
 1229 061e E1E3      	.LM108:
 1230 0620 F0E0      		ldi r30,lo8(60)
 1231 0622 8081      		ldi r31,hi8(60)
 1232 0624 8061      		ld r24,Z
 1233 0626 8C93      		mov r24,r24
 319:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 320:sig-ctc-els-ELS.c ****     	        }
 1234               	brne .L52
 1235               	.L51:
 1237 062a B0E0      	.LM107:
 1238 062c E1E3      		ldi r24,lo8(16)
 1239 062e F0E0      		ldi r25,hi8(16)
 1240 0630 8081      		ldd r22,Y+5
 1241 0632 8062      		rcall __eewr_byte_tn2313
 321:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1243               	ldi r30,lo8(60)
 1244               		ldi r31,hi8(60)
 1245 0636 A1E3      		ld r24,Z
 1246 0638 B0E0      		mov r24,r24
 1247 063a E1E3      		ldi r25,lo8(0)
 1248 063c F0E0      		andi r24,lo8(2)
 1249 063e 8081      		andi r25,hi8(2)
 1250 0640 8064      		sbiw r24,0
 1251 0642 8C93      		breq .L53
 322:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 323:sig-ctc-els-ELS.c ****     	        }
 1252               	25,hi8(16)
 1253               		ldd r22,Y+5
 1254 0644 A8E3      		rcall __eewr_byte_tn2313
 1256 0648 E8E3      	.LM108:
 1257 064a F0E0      		ldi r30,lo8(60)
 1258 064c 8081      		ldi r31,hi8(60)
 1259 064e 8160      		ld r24,Z
 1260 0650 8C93      		mov r24,r24
 324:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1261               	brne .L52
 1262               	.L51:
 1264 0654 B0E0      	.LM107:
 1265 0656 E7E3      		ldi r24,lo8(16)
 1266 0658 F0E0      		ldi r25,hi8(16)
 1267 065a 8081      		ldd r22,Y+5
 1268 065c 8160      		rcall __eewr_byte_tn2313
 325:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 326:sig-ctc-els-ELS.c ****     	        }
 1270               	ldi r30,lo8(60)
 1271               		ldi r31,hi8(60)
 1272 0660 A8E3      		ld r24,Z
 1273 0662 B0E0      		mov r24,r24
 1274 0664 E8E3      		ldi r25,lo8(0)
 1275 0666 F0E0      		andi r24,lo8(2)
 1276 0668 8081      		andi r25,hi8(2)
 1277 066a 8260      		sbiw r24,0
 1278 066c 8C93      		breq .L53
 327:sig-ctc-els-ELS.c **** osition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_
 1279               	25,hi8(16)
 1280               		ldd r22,Y+5
 1281 066e A7E3      		rcall __eewr_byte_tn2313
 1283 0672 E7E3      	.LM108:
 1284 0674 F0E0      		ldi r30,lo8(60)
 1285 0676 8081      		ldi r31,hi8(60)
 1286 0678 8260      		ld r24,Z
 1287 067a 8C93      		mov r24,r24
 328:sig-ctc-els-ELS.c **** SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequest
 329:sig-ctc-els-ELS.c ****     	        }
 330:sig-ctc-els-ELS.c ****     	    }
 331:sig-ctc-els-ELS.c ****     	    
 1288               	brne .L52
 1289               	.L51:
 1291               	.LM107:
 332:sig-ctc-els-ELS.c **** lse if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_NORMAL;
 333:sig-ctc-els-ELS.c ****     	        }
 1292               	 r24,lo8(16)
 1293               		ldi r25,hi8(16)
 1294 067e CF91      		ldd r22,Y+5
 1295 0680 DF91      		rcall __eewr_byte_tn2313
 1297               	.LM108:
 1298               		ldi r30,lo8(60)
 1299               		ldi r31,hi8(60)
 1300               		ld r24,Z
 1301               		mov r24,r24
 1302               		ldi r25,lo8(0)
 1303               		andi r24,lo8(2)
 1304               		andi r25,hi8(2)
 1305               		sbiw r24,0
 1306               		breq .L53
 1307               	.L54:
 1308               		ldi r30,lo8(60)
 1309               		ldi r31,hi8(60)
 1310               		ld r24,Z
 1311               		mov r24,r24
 1312               		ldi r25,lo8(0)
DEFINED SYMBOLS
                            *ABS*:00000000 sig-ctc-els-ELS.c
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:2      *ABS*:0000003f __SREG__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:3      *ABS*:0000003e __SP_H__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:4      *ABS*:0000003d __SP_L__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:5      *ABS*:00000034 __CCP__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:6      *ABS*:00000000 __tmp_reg__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:7      *ABS*:00000001 __zero_reg__
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:79     .text:00000000 KeysInit
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:138    .text:00000040 get_key_press
                            *COM*:00000001 key_press
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:192    .text:00000070 get_key_rpt
                            *COM*:00000001 key_rpt
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:246    .text:000000a0 get_key_short
                            *COM*:00000001 key_state
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:286    .text:000000c4 get_key_long
                             .bss:00000000 ticks.1331
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:313    .bss:00000001 ct1.1328
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:314    .bss:00000002 ct0.1327
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:319    .text:000000de __vector_6
                            *COM*:00000001 State
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:477    .text:000001d4 main
C:\DOKUME~1\MICHAE~1\LOKALE~1\Temp/ccnKUMAn.s:1128   .text:0000058c init

UNDEFINED SYMBOLS
__eerd_byte_tn2313
__eewr_byte_tn2313
__do_clear_bss
