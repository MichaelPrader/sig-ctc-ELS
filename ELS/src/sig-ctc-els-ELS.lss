
sig-ctc-els-ELS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  0000076c  2**0
                  ALLOC
  2 .stab         00000b04  00000000  00000000  0000076c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008e5  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	1c c0       	rjmp	.+56     	; 0x42 <__bad_interrupt>
   a:	1b c0       	rjmp	.+54     	; 0x42 <__bad_interrupt>
   c:	8a c0       	rjmp	.+276    	; 0x122 <__vector_6>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a7 36       	cpi	r26, 0x67	; 103
  3a:	b1 07       	cpc	r27, r17
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	ec d0       	rcall	.+472    	; 0x218 <main>
  40:	59 c3       	rjmp	.+1714   	; 0x6f4 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <KeysInit>:

volatile uint8_t key_rpt;				// key long press and repeat


void KeysInit(void)
{
  44:	df 93       	push	r29
  46:	cf 93       	push	r28
  48:	cd b7       	in	r28, 0x3d	; 61
  4a:	de b7       	in	r29, 0x3e	; 62

	TCCR0A = 0;		// no OC, TOV at MAX, MAX is 0xFF	
  4c:	e0 e5       	ldi	r30, 0x50	; 80
  4e:	f0 e0       	ldi	r31, 0x00	; 0
  50:	10 82       	st	Z, r1
	TCCR0B = 0 | _BV(CS02) | _BV(CS00);		// divide by 1024
  52:	e3 e5       	ldi	r30, 0x53	; 83
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	85 e0       	ldi	r24, 0x05	; 5
  58:	80 83       	st	Z, r24
	TIMSK = _BV(TOIE0);									// enable timer interrupt
  5a:	e9 e5       	ldi	r30, 0x59	; 89
  5c:	f0 e0       	ldi	r31, 0x00	; 0
  5e:	82 e0       	ldi	r24, 0x02	; 2
  60:	80 83       	st	Z, r24
	
	POS_IN_KEY_PORT &= ~POS_IN_KEY_MASK;
  62:	a2 e3       	ldi	r26, 0x32	; 50
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	8d 7f       	andi	r24, 0xFD	; 253
  6e:	8c 93       	st	X, r24
	POS_IN_KEY_DDR &= ~POS_IN_KEY_MASK;
  70:	a1 e3       	ldi	r26, 0x31	; 49
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e1 e3       	ldi	r30, 0x31	; 49
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	8d 7f       	andi	r24, 0xFD	; 253
  7c:	8c 93       	st	X, r24
    //UNLOCK_KEY_PORT &= ~UNLOCK_KEY_MASK;
    //UNLCOK_KEY_DDR &= ~UNLOCK_KEY_MASK;
}
  7e:	cf 91       	pop	r28
  80:	df 91       	pop	r29
  82:	08 95       	ret

00000084 <get_key_press>:


uint8_t get_key_press( uint8_t key_mask )
{
  84:	df 93       	push	r29
  86:	cf 93       	push	r28
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	89 83       	std	Y+1, r24	; 0x01
  cli();					// read and clear atomic !
  90:	f8 94       	cli
  key_mask &= key_press;                        // read key(s)
  92:	90 91 65 00 	lds	r25, 0x0065
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	89 23       	and	r24, r25
  9a:	89 83       	std	Y+1, r24	; 0x01
  key_press ^= key_mask;                        // clear key(s)
  9c:	90 91 65 00 	lds	r25, 0x0065
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	89 27       	eor	r24, r25
  a4:	80 93 65 00 	sts	0x0065, r24
  sei();
  a8:	78 94       	sei
  return key_mask;
  aa:	89 81       	ldd	r24, Y+1	; 0x01
}
  ac:	0f 90       	pop	r0
  ae:	cf 91       	pop	r28
  b0:	df 91       	pop	r29
  b2:	08 95       	ret

000000b4 <get_key_rpt>:


uint8_t get_key_rpt( uint8_t key_mask )
{
  b4:	df 93       	push	r29
  b6:	cf 93       	push	r28
  b8:	0f 92       	push	r0
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	89 83       	std	Y+1, r24	; 0x01
  cli();					// read and clear atomic !
  c0:	f8 94       	cli
  key_mask &= key_rpt;                        	// read key(s)
  c2:	90 91 64 00 	lds	r25, 0x0064
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	89 23       	and	r24, r25
  ca:	89 83       	std	Y+1, r24	; 0x01
  key_rpt ^= key_mask;                        	// clear key(s)
  cc:	90 91 64 00 	lds	r25, 0x0064
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	89 27       	eor	r24, r25
  d4:	80 93 64 00 	sts	0x0064, r24
  sei();
  d8:	78 94       	sei
  return key_mask;
  da:	89 81       	ldd	r24, Y+1	; 0x01
}
  dc:	0f 90       	pop	r0
  de:	cf 91       	pop	r28
  e0:	df 91       	pop	r29
  e2:	08 95       	ret

000000e4 <get_key_short>:


uint8_t get_key_short( uint8_t key_mask )
{
  e4:	df 93       	push	r29
  e6:	cf 93       	push	r28
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
  ee:	89 83       	std	Y+1, r24	; 0x01
  cli();			// read key state and key press atomic !
  f0:	f8 94       	cli
  return get_key_press( ~key_state & key_mask );
  f2:	80 91 66 00 	lds	r24, 0x0066
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25
  fe:	c2 df       	rcall	.-124    	; 0x84 <get_key_press>
}
 100:	0f 90       	pop	r0
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <get_key_long>:


uint8_t get_key_long( uint8_t key_mask )
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	0f 92       	push	r0
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	89 83       	std	Y+1, r24	; 0x01
  return get_key_press( get_key_rpt( key_mask ));
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	ce df       	rcall	.-100    	; 0xb4 <get_key_rpt>
 118:	b5 df       	rcall	.-150    	; 0x84 <get_key_press>
}
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <__vector_6>:
void init(void);



ISR (TIMER0_OVF_vect)			// every 10ms
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <__vector_6+0x18>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
    uint8_t k, keyInput;
    // key debounce
    
    static uint8_t ticks = 0;

    TCNT0 = TIMER0_PRELOAD;	// preload for 10ms
 13e:	e2 e5       	ldi	r30, 0x52	; 82
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	88 ed       	ldi	r24, 0xD8	; 216
 144:	80 83       	st	Z, r24
  
  
  // compose input register by reading various input PIN registers (PINA and PIND)
    if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) keyInput |= POS_IN_KEY_DATA_BYTE_MASK; else  keyInput &= ~POS_IN_KEY_DATA_BYTE_MASK;
 146:	e0 e3       	ldi	r30, 0x30	; 48
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	82 70       	andi	r24, 0x02	; 2
 152:	90 70       	andi	r25, 0x00	; 0
 154:	00 97       	sbiw	r24, 0x00	; 0
 156:	21 f0       	breq	.+8      	; 0x160 <__vector_6+0x3e>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	89 83       	std	Y+1, r24	; 0x01
 15e:	03 c0       	rjmp	.+6      	; 0x166 <__vector_6+0x44>
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	8d 7f       	andi	r24, 0xFD	; 253
 164:	89 83       	std	Y+1, r24	; 0x01
    if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) keyInput |= UNLOCK_KEY_DATA_BYTE_MASK; else  keyInput &= ~UNLOCK_KEY_DATA_BYTE_MASK;
 166:	e9 e3       	ldi	r30, 0x39	; 57
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	88 2f       	mov	r24, r24
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	82 70       	andi	r24, 0x02	; 2
 172:	90 70       	andi	r25, 0x00	; 0
 174:	00 97       	sbiw	r24, 0x00	; 0
 176:	21 f0       	breq	.+8      	; 0x180 <__vector_6+0x5e>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	81 60       	ori	r24, 0x01	; 1
 17c:	89 83       	std	Y+1, r24	; 0x01
 17e:	03 c0       	rjmp	.+6      	; 0x186 <__vector_6+0x64>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	8e 7f       	andi	r24, 0xFE	; 254
 184:	89 83       	std	Y+1, r24	; 0x01

  
  
    k = key_state ^ keyInput;		// key changed ?  // "~" omitted for HIGH-active inputs; (LOW active: k = key_state ^ ~KEY_PIN;)
 186:	90 91 66 00 	lds	r25, 0x0066
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	89 27       	eor	r24, r25
 18e:	8a 83       	std	Y+2, r24	; 0x02
    ct0 = ~( ct0 & k );			// reset or count ct0
 190:	90 91 62 00 	lds	r25, 0x0062
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	89 23       	and	r24, r25
 198:	80 95       	com	r24
 19a:	80 93 62 00 	sts	0x0062, r24
    ct1 = ct0 ^ (ct1 & k);		// reset or count ct1
 19e:	90 91 61 00 	lds	r25, 0x0061
 1a2:	8a 81       	ldd	r24, Y+2	; 0x02
 1a4:	98 23       	and	r25, r24
 1a6:	80 91 62 00 	lds	r24, 0x0062
 1aa:	89 27       	eor	r24, r25
 1ac:	80 93 61 00 	sts	0x0061, r24
    k&= ct0 & ct1;			// count until roll over ?
 1b0:	90 91 62 00 	lds	r25, 0x0062
 1b4:	80 91 61 00 	lds	r24, 0x0061
 1b8:	98 23       	and	r25, r24
 1ba:	8a 81       	ldd	r24, Y+2	; 0x02
 1bc:	89 23       	and	r24, r25
 1be:	8a 83       	std	Y+2, r24	; 0x02
    key_state ^= k;			// then toggle debounced state
 1c0:	90 91 66 00 	lds	r25, 0x0066
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	89 27       	eor	r24, r25
 1c8:	80 93 66 00 	sts	0x0066, r24
    key_press |= key_state & k;		// 0->1: key press detect
 1cc:	90 91 66 00 	lds	r25, 0x0066
 1d0:	8a 81       	ldd	r24, Y+2	; 0x02
 1d2:	98 23       	and	r25, r24
 1d4:	80 91 65 00 	lds	r24, 0x0065
 1d8:	89 2b       	or	r24, r25
 1da:	80 93 65 00 	sts	0x0065, r24
    key_rpt |= key_state & REPEAT_MASK;
    */

    //if (OnOffLockout) --OnOffLockout;
  
    ++ticks;
 1de:	80 91 60 00 	lds	r24, 0x0060
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 60 00 	sts	0x0060, r24
	if (ticks >= QUARTER_SECS_IN_10_MSEC)
 1e8:	80 91 60 00 	lds	r24, 0x0060
 1ec:	89 31       	cpi	r24, 0x19	; 25
 1ee:	38 f0       	brcs	.+14     	; 0x1fe <__vector_6+0xdc>
	{
	   ticks = 0;
 1f0:	10 92 60 00 	sts	0x0060, r1
	   State |= QUARTER_SEC;
 1f4:	80 91 63 00 	lds	r24, 0x0063
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	80 93 63 00 	sts	0x0063, r24
	}
  
}
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <main>:

int main(void)
{
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	00 d0       	rcall	.+0      	; 0x21e <main+0x6>
 21e:	00 d0       	rcall	.+0      	; 0x220 <main+0x8>
 220:	00 d0       	rcall	.+0      	; 0x222 <main+0xa>
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	uint8_t SwitchRequestedPosition, SwitchReadPosition;
	uint8_t SwitchPowerTimer = 0, TrackRelaisPowerTimer = 0;
 226:	1b 82       	std	Y+3, r1	; 0x03
 228:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t LockTimeoutTimer = 0;
 22a:	19 82       	std	Y+1, r1	; 0x01
	//uint8_t KeyMemory = 0;

    // activate MOSFET at wakeup
	HOLD_DDR |= HOLD_MASK;
 22c:	aa e3       	ldi	r26, 0x3A	; 58
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	ea e3       	ldi	r30, 0x3A	; 58
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	81 60       	ori	r24, 0x01	; 1
 238:	8c 93       	st	X, r24
	HOLD_PORT |= HOLD_MASK;
 23a:	ab e3       	ldi	r26, 0x3B	; 59
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	eb e3       	ldi	r30, 0x3B	; 59
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	81 60       	ori	r24, 0x01	; 1
 246:	8c 93       	st	X, r24

    // memorize high keys
  //  if (POS_IN_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= POS_IN_KEY_DATA_BYTE_MASK; else  KeyMemory &= ~POS_IN_KEY_DATA_BYTE_MASK;
   // if (UNLOCK_KEY_PIN & POS_IN_KEY_MASK) KeyMemory |= UNLOCK_KEY_DATA_BYTE_MASK; else  KeyMemory &= ~UNLOCK_KEY_DATA_BYTE_MASK;
	
	State = 0; // deactivate UNLOCKED, TIMING_OUT
 248:	10 92 63 00 	sts	0x0063, r1
	
	init();
 24c:	c1 d1       	rcall	.+898    	; 0x5d0 <init>
	
	
	//SwitchRequestedPosition = TO_NORMAL;
	
	// deactivate switch motor
	SWITCH_POWER_DISABLE_PORT |= SWITCH_POWER_DISABLE_MASK;
 24e:	a2 e3       	ldi	r26, 0x32	; 50
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e2 e3       	ldi	r30, 0x32	; 50
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 62       	ori	r24, 0x20	; 32
 25a:	8c 93       	st	X, r24

    // deactivate relais
    TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 25c:	a2 e3       	ldi	r26, 0x32	; 50
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e2 e3       	ldi	r30, 0x32	; 50
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8f 7e       	andi	r24, 0xEF	; 239
 268:	8c 93       	st	X, r24
    TRACK_RELAIS_POWER_DISABLE_PORT &= ~TRACK_RELAIS_POWER_DISABLE_MASK;
 26a:	a2 e3       	ldi	r26, 0x32	; 50
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e2 e3       	ldi	r30, 0x32	; 50
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	8f 7b       	andi	r24, 0xBF	; 191
 276:	8c 93       	st	X, r24
    
	sei();
 278:	78 94       	sei
	
	
	
	if (!(eeprom_is_ready())) eeprom_busy_wait();
 27a:	ec e3       	ldi	r30, 0x3C	; 60
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	88 2f       	mov	r24, r24
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	82 70       	andi	r24, 0x02	; 2
 286:	90 70       	andi	r25, 0x00	; 0
 288:	00 97       	sbiw	r24, 0x00	; 0
 28a:	49 f0       	breq	.+18     	; 0x29e <main+0x86>
 28c:	ec e3       	ldi	r30, 0x3C	; 60
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	88 2f       	mov	r24, r24
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	82 70       	andi	r24, 0x02	; 2
 298:	90 70       	andi	r25, 0x00	; 0
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	b9 f7       	brne	.-18     	; 0x28c <main+0x74>
	SwitchRequestedPosition = eeprom_read_byte((uint8_t *) EE_REQUESTED_POSITION_STORE_ADDRESS);
 29e:	80 e1       	ldi	r24, 0x10	; 16
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	12 d2       	rcall	.+1060   	; 0x6c8 <__eerd_byte_tn2313>
 2a4:	8d 83       	std	Y+5, r24	; 0x05

	if ((SwitchRequestedPosition != TO_NORMAL) && (SwitchRequestedPosition != TO_REVERSE))  SwitchRequestedPosition = TO_NORMAL;
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	29 f0       	breq	.+10     	; 0x2b6 <main+0x9e>
 2ac:	8d 81       	ldd	r24, Y+5	; 0x05
 2ae:	82 30       	cpi	r24, 0x02	; 2
 2b0:	11 f0       	breq	.+4      	; 0x2b6 <main+0x9e>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	8d 83       	std	Y+5, r24	; 0x05
    // TODO - could delay some 50-100 ms here?
    /**************************/
    

	// clear any keys previously pressed
	i = get_key_press(0xFF);
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	e5 de       	rcall	.-566    	; 0x84 <get_key_press>
 2ba:	8e 83       	std	Y+6, r24	; 0x06
	i = get_key_short(0xFF);
 2bc:	8f ef       	ldi	r24, 0xFF	; 255
 2be:	12 df       	rcall	.-476    	; 0xe4 <get_key_short>
 2c0:	8e 83       	std	Y+6, r24	; 0x06
	i = get_key_long(0xFF);
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	21 df       	rcall	.-446    	; 0x108 <get_key_long>
 2c6:	8e 83       	std	Y+6, r24	; 0x06
	i = get_key_rpt(0xFF);
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	f4 de       	rcall	.-536    	; 0xb4 <get_key_rpt>
 2cc:	8e 83       	std	Y+6, r24	; 0x06
    {
        // MAIN LOOP
        
        // read status of turnout; because of the capacitors, initial position will
		// be wrong until the capacitors have fully loaded
    	if (SWITCH_N_PIN & SWITCH_N_MASK) SwitchReadPosition |= TO_NORMAL; else SwitchReadPosition &= ~TO_NORMAL;
 2ce:	e0 e3       	ldi	r30, 0x30	; 48
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	88 2f       	mov	r24, r24
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	84 70       	andi	r24, 0x04	; 4
 2da:	90 70       	andi	r25, 0x00	; 0
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	21 f0       	breq	.+8      	; 0x2e8 <main+0xd0>
 2e0:	8c 81       	ldd	r24, Y+4	; 0x04
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	8c 83       	std	Y+4, r24	; 0x04
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <main+0xd6>
 2e8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ea:	8e 7f       	andi	r24, 0xFE	; 254
 2ec:	8c 83       	std	Y+4, r24	; 0x04
    	if (SWITCH_R_PIN & SWITCH_R_MASK) SwitchReadPosition |= TO_REVERSE; else SwitchReadPosition &= ~TO_REVERSE;
 2ee:	e6 e3       	ldi	r30, 0x36	; 54
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	88 2f       	mov	r24, r24
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	80 71       	andi	r24, 0x10	; 16
 2fa:	90 70       	andi	r25, 0x00	; 0
 2fc:	00 97       	sbiw	r24, 0x00	; 0
 2fe:	21 f0       	breq	.+8      	; 0x308 <main+0xf0>
 300:	8c 81       	ldd	r24, Y+4	; 0x04
 302:	82 60       	ori	r24, 0x02	; 2
 304:	8c 83       	std	Y+4, r24	; 0x04
 306:	03 c0       	rjmp	.+6      	; 0x30e <main+0xf6>
 308:	8c 81       	ldd	r24, Y+4	; 0x04
 30a:	8d 7f       	andi	r24, 0xFD	; 253
 30c:	8c 83       	std	Y+4, r24	; 0x04
		
		SwitchReadPosition &= TO_NORMAL | TO_REVERSE;
 30e:	8c 81       	ldd	r24, Y+4	; 0x04
 310:	83 70       	andi	r24, 0x03	; 3
 312:	8c 83       	std	Y+4, r24	; 0x04
		
		
        // read the MODE configuration switch
    	if (MODE_PIN & MODE_MASK)
 314:	e6 e3       	ldi	r30, 0x36	; 54
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	88 2f       	mov	r24, r24
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	84 70       	andi	r24, 0x04	; 4
 320:	90 70       	andi	r25, 0x00	; 0
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	09 f4       	brne	.+2      	; 0x328 <main+0x110>
 326:	65 c0       	rjmp	.+202    	; 0x3f2 <main+0x1da>
    	{
    	    // SW1 is high (off)
    	    // in this mode, the lock is simulated
    	    if (!(State & (UNLOCKED | TIMING_OUT)))
 328:	80 91 63 00 	lds	r24, 0x0063
 32c:	88 2f       	mov	r24, r24
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	86 70       	andi	r24, 0x06	; 6
 332:	90 70       	andi	r25, 0x00	; 0
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	a9 f4       	brne	.+42     	; 0x362 <main+0x14a>
    	    {
    	        // the lock is still set (neither unlocked nor timing out)
    	        // we need to check why we woke up
    	        if (get_key_press( UNLOCK_KEY_DATA_BYTE_MASK)) // ||(KeyMemory & UNLOCK_KEY_DATA_BYTE_MASK))
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	a4 de       	rcall	.-696    	; 0x84 <get_key_press>
 33c:	88 23       	and	r24, r24
 33e:	e9 f1       	breq	.+122    	; 0x3ba <main+0x1a2>
    	            // lock is set and unlock key was pressed
    	            //  clear stored key at startup
    	            //KeyMemory &= ~UNLOCK_KEY_DATA_BYTE_MASK;
    	            
    	            // activate track relais
    	            TRACK_RELAIS_PORT |= TRACK_RELAIS_MASK;
 340:	a2 e3       	ldi	r26, 0x32	; 50
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e2 e3       	ldi	r30, 0x32	; 50
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	80 61       	ori	r24, 0x10	; 16
 34c:	8c 93       	st	X, r24
    	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 34e:	84 e0       	ldi	r24, 0x04	; 4
 350:	8a 83       	std	Y+2, r24	; 0x02
                    
                    // start timeout
    	            LockTimeoutTimer = LOCK_TIMEOUT_TIMER;
 352:	84 e1       	ldi	r24, 0x14	; 20
 354:	89 83       	std	Y+1, r24	; 0x01
    	            State |= TIMING_OUT;
 356:	80 91 63 00 	lds	r24, 0x0063
 35a:	84 60       	ori	r24, 0x04	; 4
 35c:	80 93 63 00 	sts	0x0063, r24
 360:	2c c0       	rjmp	.+88     	; 0x3ba <main+0x1a2>
    	        }
    	    } else if (State & UNLOCKED) {
 362:	80 91 63 00 	lds	r24, 0x0063
 366:	88 2f       	mov	r24, r24
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	82 70       	andi	r24, 0x02	; 2
 36c:	90 70       	andi	r25, 0x00	; 0
 36e:	00 97       	sbiw	r24, 0x00	; 0
 370:	21 f1       	breq	.+72     	; 0x3ba <main+0x1a2>
    	        
    	        if (get_key_press( UNLOCK_KEY_DATA_BYTE_MASK) && (SwitchReadPosition  == TO_NORMAL))
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	87 de       	rcall	.-754    	; 0x84 <get_key_press>
 376:	88 23       	and	r24, r24
 378:	89 f0       	breq	.+34     	; 0x39c <main+0x184>
 37a:	8c 81       	ldd	r24, Y+4	; 0x04
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	71 f4       	brne	.+28     	; 0x39c <main+0x184>
    	        {
    	            // switch is normal, lock is unlocked, button is pressed => relock
    	            State &= ~UNLOCKED;
 380:	80 91 63 00 	lds	r24, 0x0063
 384:	8d 7f       	andi	r24, 0xFD	; 253
 386:	80 93 63 00 	sts	0x0063, r24
    	            
    	            // release the track relais and give it some time to move
    	            TRACK_RELAIS_PORT &= ~TRACK_RELAIS_MASK;
 38a:	a2 e3       	ldi	r26, 0x32	; 50
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	e2 e3       	ldi	r30, 0x32	; 50
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	80 81       	ld	r24, Z
 394:	8f 7e       	andi	r24, 0xEF	; 239
 396:	8c 93       	st	X, r24
    	            TrackRelaisPowerTimer = TRACK_RELAIS_POWER_TIMER;
 398:	84 e0       	ldi	r24, 0x04	; 4
 39a:	8a 83       	std	Y+2, r24	; 0x02
    	        }
    	        
    	        if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	72 de       	rcall	.-796    	; 0x84 <get_key_press>
 3a0:	88 23       	and	r24, r24
 3a2:	59 f0       	breq	.+22     	; 0x3ba <main+0x1a2>
    	        {
    	            // switch is unlocked, throw it
    	            if (SwitchRequestedPosition == TO_NORMAL) SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_NORMAL;
 3a4:	8d 81       	ldd	r24, Y+5	; 0x05
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	19 f4       	brne	.+6      	; 0x3b0 <main+0x198>
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	8d 83       	std	Y+5, r24	; 0x05
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <main+0x1a2>
 3b0:	8d 81       	ldd	r24, Y+5	; 0x05
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	11 f4       	brne	.+4      	; 0x3ba <main+0x1a2>
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	8d 83       	std	Y+5, r24	; 0x05
    	        }
    	    }
    	    
    	    
    	    if ((State & TIMING_OUT) && (LockTimeoutTimer  == 0))
 3ba:	80 91 63 00 	lds	r24, 0x0063
 3be:	88 2f       	mov	r24, r24
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	84 70       	andi	r24, 0x04	; 4
 3c4:	90 70       	andi	r25, 0x00	; 0
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	41 f1       	breq	.+80     	; 0x41a <main+0x202>
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	88 23       	and	r24, r24
 3ce:	29 f5       	brne	.+74     	; 0x41a <main+0x202>
            {
    		    // lock has timed out, unlock it
				// clear any keys which might have been pressed
				i = get_key_press( POS_IN_KEY_DATA_BYTE_MASK);
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	58 de       	rcall	.-848    	; 0x84 <get_key_press>
 3d4:	8e 83       	std	Y+6, r24	; 0x06
				i = get_key_press( UNLOCK_KEY_DATA_BYTE_MASK);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	55 de       	rcall	.-854    	; 0x84 <get_key_press>
 3da:	8e 83       	std	Y+6, r24	; 0x06
    		    State &= ~TIMING_OUT;
 3dc:	80 91 63 00 	lds	r24, 0x0063
 3e0:	8b 7f       	andi	r24, 0xFB	; 251
 3e2:	80 93 63 00 	sts	0x0063, r24
    		    State |= UNLOCKED;
 3e6:	80 91 63 00 	lds	r24, 0x0063
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	80 93 63 00 	sts	0x0063, r24
 3f0:	14 c0       	rjmp	.+40     	; 0x41a <main+0x202>
    	    
    	        
    	} else {
    	    // SW1 is low (on)
			
			if ( get_key_press (UNLOCK_KEY_DATA_BYTE_MASK))
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	47 de       	rcall	.-882    	; 0x84 <get_key_press>
 3f6:	88 23       	and	r24, r24
 3f8:	09 f0       	breq	.+2      	; 0x3fc <main+0x1e4>
			{
				asm("nop");
 3fa:	00 00       	nop
			}
			
            if ( get_key_press( POS_IN_KEY_DATA_BYTE_MASK))// || (KeyMemory & POS_IN_KEY_DATA_BYTE_MASK))
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	42 de       	rcall	.-892    	; 0x84 <get_key_press>
 400:	88 23       	and	r24, r24
 402:	59 f0       	breq	.+22     	; 0x41a <main+0x202>
            {
                // key pressed, toggle switch position; in this mode, no lock is simulated
                if (SwitchRequestedPosition == TO_NORMAL) SwitchRequestedPosition = TO_REVERSE; else if (SwitchRequestedPosition == TO_REVERSE) SwitchRequestedPosition = TO_NORMAL;
 404:	8d 81       	ldd	r24, Y+5	; 0x05
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	19 f4       	brne	.+6      	; 0x410 <main+0x1f8>
 40a:	82 e0       	ldi	r24, 0x02	; 2
 40c:	8d 83       	std	Y+5, r24	; 0x05
 40e:	05 c0       	rjmp	.+10     	; 0x41a <main+0x202>
 410:	8d 81       	ldd	r24, Y+5	; 0x05
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	11 f4       	brne	.+4      	; 0x41a <main+0x202>
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	8d 83       	std	Y+5, r24	; 0x05
                // clear stored key at startup
                //KeyMemory &= ~POS_IN_KEY_DATA_BYTE_MASK;
            }
    	}
    	
    	if (SwitchRequestedPosition == TO_NORMAL) SWITCH_POS_PORT |= SWITCH_POS_MASK; else SWITCH_POS_PORT &= ~SWITCH_POS_MASK;
 41a:	8d 81       	ldd	r24, Y+5	; 0x05
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	41 f4       	brne	.+16     	; 0x430 <main+0x218>
 420:	a2 e3       	ldi	r26, 0x32	; 50
 422:	b0 e0       	ldi	r27, 0x00	; 0
 424:	e2 e3       	ldi	r30, 0x32	; 50
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 60       	ori	r24, 0x08	; 8
 42c:	8c 93       	st	X, r24
 42e:	07 c0       	rjmp	.+14     	; 0x43e <main+0x226>
 430:	a2 e3       	ldi	r26, 0x32	; 50
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e2 e3       	ldi	r30, 0x32	; 50
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	87 7f       	andi	r24, 0xF7	; 247
 43c:	8c 93       	st	X, r24
    	

    	
    	if (   SwitchRequestedPosition  != SwitchReadPosition )
 43e:	9d 81       	ldd	r25, Y+5	; 0x05
 440:	8c 81       	ldd	r24, Y+4	; 0x04
 442:	98 17       	cp	r25, r24
 444:	11 f0       	breq	.+4      	; 0x44a <main+0x232>
    	{
    	    // switch state is not congruent with requested state
    	    SwitchPowerTimer = SWITCH_POWER_TIMER;
 446:	80 e1       	ldi	r24, 0x10	; 16
 448:	8b 83       	std	Y+3, r24	; 0x03
    	}
    	
    	if (SwitchPowerTimer) SWITCH_POWER_DISABLE_PORT &= ~SWITCH_POWER_DISABLE_MASK; else SWITCH_POWER_DISABLE_PORT |= SWITCH_POWER_DISABLE_MASK;
 44a:	8b 81       	ldd	r24, Y+3	; 0x03
 44c:	88 23       	and	r24, r24
 44e:	41 f0       	breq	.+16     	; 0x460 <main+0x248>
 450:	a2 e3       	ldi	r26, 0x32	; 50
 452:	b0 e0       	ldi	r27, 0x00	; 0
 454:	e2 e3       	ldi	r30, 0x32	; 50
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	8f 7d       	andi	r24, 0xDF	; 223
 45c:	8c 93       	st	X, r24
 45e:	07 c0       	rjmp	.+14     	; 0x46e <main+0x256>
 460:	a2 e3       	ldi	r26, 0x32	; 50
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	e2 e3       	ldi	r30, 0x32	; 50
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	80 62       	ori	r24, 0x20	; 32
 46c:	8c 93       	st	X, r24
		if (TrackRelaisPowerTimer) TRACK_RELAIS_POWER_DISABLE_PORT &= ~TRACK_RELAIS_POWER_DISABLE_MASK; else TRACK_RELAIS_POWER_DISABLE_PORT |= TRACK_RELAIS_POWER_DISABLE_MASK;
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	88 23       	and	r24, r24
 472:	41 f0       	breq	.+16     	; 0x484 <main+0x26c>
 474:	a2 e3       	ldi	r26, 0x32	; 50
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e2 e3       	ldi	r30, 0x32	; 50
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	8f 7b       	andi	r24, 0xBF	; 191
 480:	8c 93       	st	X, r24
 482:	07 c0       	rjmp	.+14     	; 0x492 <main+0x27a>
 484:	a2 e3       	ldi	r26, 0x32	; 50
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e2 e3       	ldi	r30, 0x32	; 50
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	80 64       	ori	r24, 0x40	; 64
 490:	8c 93       	st	X, r24

		
		if (State & QUARTER_SEC)
 492:	80 91 63 00 	lds	r24, 0x0063
 496:	88 2f       	mov	r24, r24
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	81 70       	andi	r24, 0x01	; 1
 49c:	90 70       	andi	r25, 0x00	; 0
 49e:	88 23       	and	r24, r24
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <main+0x28c>
 4a2:	55 c0       	rjmp	.+170    	; 0x54e <main+0x336>
        {
            if (SwitchPowerTimer) --SwitchPowerTimer;
 4a4:	8b 81       	ldd	r24, Y+3	; 0x03
 4a6:	88 23       	and	r24, r24
 4a8:	19 f0       	breq	.+6      	; 0x4b0 <main+0x298>
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	81 50       	subi	r24, 0x01	; 1
 4ae:	8b 83       	std	Y+3, r24	; 0x03
            if (TrackRelaisPowerTimer) --TrackRelaisPowerTimer;
 4b0:	8a 81       	ldd	r24, Y+2	; 0x02
 4b2:	88 23       	and	r24, r24
 4b4:	19 f0       	breq	.+6      	; 0x4bc <main+0x2a4>
 4b6:	8a 81       	ldd	r24, Y+2	; 0x02
 4b8:	81 50       	subi	r24, 0x01	; 1
 4ba:	8a 83       	std	Y+2, r24	; 0x02
            if (LockTimeoutTimer) --LockTimeoutTimer;
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	88 23       	and	r24, r24
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <main+0x2b0>
 4c2:	89 81       	ldd	r24, Y+1	; 0x01
 4c4:	81 50       	subi	r24, 0x01	; 1
 4c6:	89 83       	std	Y+1, r24	; 0x01
            
            if (State & UNLOCKED)
 4c8:	80 91 63 00 	lds	r24, 0x0063
 4cc:	88 2f       	mov	r24, r24
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	82 70       	andi	r24, 0x02	; 2
 4d2:	90 70       	andi	r25, 0x00	; 0
 4d4:	00 97       	sbiw	r24, 0x00	; 0
 4d6:	79 f0       	breq	.+30     	; 0x4f6 <main+0x2de>
            {
                LED_0N_PORT &= ~LED_0N_MASK;
 4d8:	a8 e3       	ldi	r26, 0x38	; 56
 4da:	b0 e0       	ldi	r27, 0x00	; 0
 4dc:	e8 e3       	ldi	r30, 0x38	; 56
 4de:	f0 e0       	ldi	r31, 0x00	; 0
 4e0:	80 81       	ld	r24, Z
 4e2:	8e 7f       	andi	r24, 0xFE	; 254
 4e4:	8c 93       	st	X, r24
                LED_1R_PORT &= ~LED_1R_MASK;
 4e6:	a8 e3       	ldi	r26, 0x38	; 56
 4e8:	b0 e0       	ldi	r27, 0x00	; 0
 4ea:	e8 e3       	ldi	r30, 0x38	; 56
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	8d 7f       	andi	r24, 0xFD	; 253
 4f2:	8c 93       	st	X, r24
 4f4:	27 c0       	rjmp	.+78     	; 0x544 <main+0x32c>
            } else if (State & TIMING_OUT) {
 4f6:	80 91 63 00 	lds	r24, 0x0063
 4fa:	88 2f       	mov	r24, r24
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	84 70       	andi	r24, 0x04	; 4
 500:	90 70       	andi	r25, 0x00	; 0
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	89 f0       	breq	.+34     	; 0x528 <main+0x310>
                LED_0N_PORT ^= LED_0N_MASK;
 506:	a8 e3       	ldi	r26, 0x38	; 56
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e8 e3       	ldi	r30, 0x38	; 56
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	90 81       	ld	r25, Z
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	89 27       	eor	r24, r25
 514:	8c 93       	st	X, r24
                LED_1R_PORT ^= LED_1R_MASK;
 516:	a8 e3       	ldi	r26, 0x38	; 56
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e8 e3       	ldi	r30, 0x38	; 56
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	90 81       	ld	r25, Z
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	89 27       	eor	r24, r25
 524:	8c 93       	st	X, r24
 526:	0e c0       	rjmp	.+28     	; 0x544 <main+0x32c>
            } else {
                LED_0N_PORT |= LED_0N_MASK;
 528:	a8 e3       	ldi	r26, 0x38	; 56
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	e8 e3       	ldi	r30, 0x38	; 56
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	81 60       	ori	r24, 0x01	; 1
 534:	8c 93       	st	X, r24
                LED_1R_PORT |= LED_1R_MASK;
 536:	a8 e3       	ldi	r26, 0x38	; 56
 538:	b0 e0       	ldi	r27, 0x00	; 0
 53a:	e8 e3       	ldi	r30, 0x38	; 56
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	82 60       	ori	r24, 0x02	; 2
 542:	8c 93       	st	X, r24
            }
            State &= ~QUARTER_SEC;
 544:	80 91 63 00 	lds	r24, 0x0063
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	80 93 63 00 	sts	0x0063, r24
        }
        
        
        if ((SwitchPowerTimer == 0) && (TrackRelaisPowerTimer == 0) && !(State & (UNLOCKED | TIMING_OUT)))
 54e:	8b 81       	ldd	r24, Y+3	; 0x03
 550:	88 23       	and	r24, r24
 552:	09 f0       	breq	.+2      	; 0x556 <main+0x33e>
 554:	bc ce       	rjmp	.-648    	; 0x2ce <main+0xb6>
 556:	8a 81       	ldd	r24, Y+2	; 0x02
 558:	88 23       	and	r24, r24
 55a:	09 f0       	breq	.+2      	; 0x55e <main+0x346>
 55c:	b8 ce       	rjmp	.-656    	; 0x2ce <main+0xb6>
 55e:	80 91 63 00 	lds	r24, 0x0063
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	86 70       	andi	r24, 0x06	; 6
 568:	90 70       	andi	r25, 0x00	; 0
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	09 f0       	breq	.+2      	; 0x570 <main+0x358>
 56e:	af ce       	rjmp	.-674    	; 0x2ce <main+0xb6>
        {
            // shutdown controller if no device is turning, and lock is not being opened or open
			if (!(eeprom_is_ready())) eeprom_busy_wait();
 570:	ec e3       	ldi	r30, 0x3C	; 60
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	82 70       	andi	r24, 0x02	; 2
 57c:	90 70       	andi	r25, 0x00	; 0
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	49 f0       	breq	.+18     	; 0x594 <main+0x37c>
 582:	ec e3       	ldi	r30, 0x3C	; 60
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	80 81       	ld	r24, Z
 588:	88 2f       	mov	r24, r24
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	82 70       	andi	r24, 0x02	; 2
 58e:	90 70       	andi	r25, 0x00	; 0
 590:	00 97       	sbiw	r24, 0x00	; 0
 592:	b9 f7       	brne	.-18     	; 0x582 <main+0x36a>
			eeprom_write_byte((uint8_t *) EE_REQUESTED_POSITION_STORE_ADDRESS, SwitchRequestedPosition);
 594:	80 e1       	ldi	r24, 0x10	; 16
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	6d 81       	ldd	r22, Y+5	; 0x05
 59a:	9e d0       	rcall	.+316    	; 0x6d8 <__eewr_byte_tn2313>
			if (!(eeprom_is_ready())) eeprom_busy_wait();
 59c:	ec e3       	ldi	r30, 0x3C	; 60
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	88 2f       	mov	r24, r24
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	82 70       	andi	r24, 0x02	; 2
 5a8:	90 70       	andi	r25, 0x00	; 0
 5aa:	00 97       	sbiw	r24, 0x00	; 0
 5ac:	49 f0       	breq	.+18     	; 0x5c0 <main+0x3a8>
 5ae:	ec e3       	ldi	r30, 0x3C	; 60
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	80 81       	ld	r24, Z
 5b4:	88 2f       	mov	r24, r24
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	82 70       	andi	r24, 0x02	; 2
 5ba:	90 70       	andi	r25, 0x00	; 0
 5bc:	00 97       	sbiw	r24, 0x00	; 0
 5be:	b9 f7       	brne	.-18     	; 0x5ae <main+0x396>
            HOLD_PORT &= ~HOLD_MASK;
 5c0:	ab e3       	ldi	r26, 0x3B	; 59
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	eb e3       	ldi	r30, 0x3B	; 59
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	80 81       	ld	r24, Z
 5ca:	8e 7f       	andi	r24, 0xFE	; 254
 5cc:	8c 93       	st	X, r24
 5ce:	7f ce       	rjmp	.-770    	; 0x2ce <main+0xb6>

000005d0 <init>:
}



void init(void)
{
 5d0:	df 93       	push	r29
 5d2:	cf 93       	push	r28
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
	
	ACSR = _BV(ACD);
 5d8:	e8 e2       	ldi	r30, 0x28	; 40
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 e8       	ldi	r24, 0x80	; 128
 5de:	80 83       	st	Z, r24
	
	//inputs
	// keys are handled in KeysInit() initialization routine
	
	CTC_IN_PORT &= ~CTC_IN_MASK;
 5e0:	a2 e3       	ldi	r26, 0x32	; 50
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e2 e3       	ldi	r30, 0x32	; 50
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	8e 7f       	andi	r24, 0xFE	; 254
 5ec:	8c 93       	st	X, r24
	CTC_IN_DDR &= ~CTC_IN_MASK;
 5ee:	a1 e3       	ldi	r26, 0x31	; 49
 5f0:	b0 e0       	ldi	r27, 0x00	; 0
 5f2:	e1 e3       	ldi	r30, 0x31	; 49
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	80 81       	ld	r24, Z
 5f8:	8e 7f       	andi	r24, 0xFE	; 254
 5fa:	8c 93       	st	X, r24
	
	MODE_PORT &= ~MODE_MASK;
 5fc:	a8 e3       	ldi	r26, 0x38	; 56
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
 600:	e8 e3       	ldi	r30, 0x38	; 56
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	80 81       	ld	r24, Z
 606:	8b 7f       	andi	r24, 0xFB	; 251
 608:	8c 93       	st	X, r24
	MODE_DDR &= ~MODE_MASK;
 60a:	a7 e3       	ldi	r26, 0x37	; 55
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e7 e3       	ldi	r30, 0x37	; 55
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	8b 7f       	andi	r24, 0xFB	; 251
 616:	8c 93       	st	X, r24
	
	SWITCH_N_PORT &= ~SWITCH_N_MASK;
 618:	a2 e3       	ldi	r26, 0x32	; 50
 61a:	b0 e0       	ldi	r27, 0x00	; 0
 61c:	e2 e3       	ldi	r30, 0x32	; 50
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	8b 7f       	andi	r24, 0xFB	; 251
 624:	8c 93       	st	X, r24
	SWITCH_N_DDR &= ~SWITCH_N_MASK;
 626:	a1 e3       	ldi	r26, 0x31	; 49
 628:	b0 e0       	ldi	r27, 0x00	; 0
 62a:	e1 e3       	ldi	r30, 0x31	; 49
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	8b 7f       	andi	r24, 0xFB	; 251
 632:	8c 93       	st	X, r24
	
	SWITCH_R_PORT &= ~SWITCH_R_MASK;
 634:	a8 e3       	ldi	r26, 0x38	; 56
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e8 e3       	ldi	r30, 0x38	; 56
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	8f 7e       	andi	r24, 0xEF	; 239
 640:	8c 93       	st	X, r24
	SWITCH_R_DDR &= ~SWITCH_R_MASK;
 642:	a7 e3       	ldi	r26, 0x37	; 55
 644:	b0 e0       	ldi	r27, 0x00	; 0
 646:	e7 e3       	ldi	r30, 0x37	; 55
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	80 81       	ld	r24, Z
 64c:	8f 7e       	andi	r24, 0xEF	; 239
 64e:	8c 93       	st	X, r24
	
	//outputs
	SWITCH_POS_DDR |= SWITCH_POS_MASK;
 650:	a1 e3       	ldi	r26, 0x31	; 49
 652:	b0 e0       	ldi	r27, 0x00	; 0
 654:	e1 e3       	ldi	r30, 0x31	; 49
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	88 60       	ori	r24, 0x08	; 8
 65c:	8c 93       	st	X, r24
	TRACK_RELAIS_DDR |= TRACK_RELAIS_MASK;
 65e:	a1 e3       	ldi	r26, 0x31	; 49
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e1 e3       	ldi	r30, 0x31	; 49
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	80 61       	ori	r24, 0x10	; 16
 66a:	8c 93       	st	X, r24
	
	SWITCH_POWER_DISABLE_DDR |= SWITCH_POWER_DISABLE_MASK;
 66c:	a1 e3       	ldi	r26, 0x31	; 49
 66e:	b0 e0       	ldi	r27, 0x00	; 0
 670:	e1 e3       	ldi	r30, 0x31	; 49
 672:	f0 e0       	ldi	r31, 0x00	; 0
 674:	80 81       	ld	r24, Z
 676:	80 62       	ori	r24, 0x20	; 32
 678:	8c 93       	st	X, r24
	TRACK_RELAIS_POWER_DISABLE_DDR |= TRACK_RELAIS_POWER_DISABLE_MASK;
 67a:	a1 e3       	ldi	r26, 0x31	; 49
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	e1 e3       	ldi	r30, 0x31	; 49
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	80 64       	ori	r24, 0x40	; 64
 686:	8c 93       	st	X, r24

	LED_0N_PORT |= LED_0N_MASK;
 688:	a8 e3       	ldi	r26, 0x38	; 56
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	e8 e3       	ldi	r30, 0x38	; 56
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	81 60       	ori	r24, 0x01	; 1
 694:	8c 93       	st	X, r24
	LED_0N_DDR |= LED_0N_MASK;
 696:	a7 e3       	ldi	r26, 0x37	; 55
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	e7 e3       	ldi	r30, 0x37	; 55
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	81 60       	ori	r24, 0x01	; 1
 6a2:	8c 93       	st	X, r24

	LED_1R_PORT |= LED_1R_MASK;
 6a4:	a8 e3       	ldi	r26, 0x38	; 56
 6a6:	b0 e0       	ldi	r27, 0x00	; 0
 6a8:	e8 e3       	ldi	r30, 0x38	; 56
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	82 60       	ori	r24, 0x02	; 2
 6b0:	8c 93       	st	X, r24
	LED_1R_DDR |= LED_1R_MASK;
 6b2:	a7 e3       	ldi	r26, 0x37	; 55
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	e7 e3       	ldi	r30, 0x37	; 55
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	82 60       	ori	r24, 0x02	; 2
 6be:	8c 93       	st	X, r24
	

	
	KeysInit();
 6c0:	c1 dc       	rcall	.-1662   	; 0x44 <KeysInit>

}
 6c2:	cf 91       	pop	r28
 6c4:	df 91       	pop	r29
 6c6:	08 95       	ret

000006c8 <__eerd_byte_tn2313>:
 6c8:	e1 99       	sbic	0x1c, 1	; 28
 6ca:	fe cf       	rjmp	.-4      	; 0x6c8 <__eerd_byte_tn2313>
 6cc:	1f ba       	out	0x1f, r1	; 31
 6ce:	8e bb       	out	0x1e, r24	; 30
 6d0:	e0 9a       	sbi	0x1c, 0	; 28
 6d2:	99 27       	eor	r25, r25
 6d4:	8d b3       	in	r24, 0x1d	; 29
 6d6:	08 95       	ret

000006d8 <__eewr_byte_tn2313>:
 6d8:	26 2f       	mov	r18, r22

000006da <__eewr_r18_tn2313>:
 6da:	e1 99       	sbic	0x1c, 1	; 28
 6dc:	fe cf       	rjmp	.-4      	; 0x6da <__eewr_r18_tn2313>
 6de:	1c ba       	out	0x1c, r1	; 28
 6e0:	1f ba       	out	0x1f, r1	; 31
 6e2:	8e bb       	out	0x1e, r24	; 30
 6e4:	2d bb       	out	0x1d, r18	; 29
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	e2 9a       	sbi	0x1c, 2	; 28
 6ec:	e1 9a       	sbi	0x1c, 1	; 28
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	01 96       	adiw	r24, 0x01	; 1
 6f2:	08 95       	ret

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>
